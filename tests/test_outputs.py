"""
Test the outputs module using the example calculation from "DSPC_standard_layers.py".

We use the example for both a reflectivity calculation, and Bayesian analysis using the Dream algorithm.
"""

import numpy as np
import pytest
import unittest.mock as mock

import RAT
import RAT.outputs
import RAT.rat_core
from RAT.utils.enums import Calculations, Geometries, LayerModels, Procedures


@pytest.fixture
def input_project():
    """The input Project object for a reflectivity calculation set out in "DSPC_standard_layers.py"."""
    project = RAT.Project(name="original_dspc_bilayer", calculation="non polarised", model="standard layers",
                          geometry="substrate/liquid", absorption=False)

    # Set up the relevant parameters
    project.parameters.append(name="Oxide Thickness", min=5.0, value=19.54, max=60.0, fit=True, prior_type="uniform",
                              mu=0.0, sigma=np.inf)
    project.parameters.append(name="Oxide SLD", min=3.39e-06, value=3.39e-06, max=3.41e-06, fit=False,
                              prior_type="uniform", mu=0.0, sigma=np.inf)
    project.parameters.append(name="SAM Tails Thickness", min=15.0, value=22.66, max=40.0, fit=True,
                              prior_type="uniform", mu=0.0, sigma=np.inf)
    project.parameters.append(name="SAM Tails SLD", min=-5e-07, value=-4.01e-07, max=-3e-07, fit=False,
                              prior_type="uniform", mu=0.0, sigma=np.inf)
    project.parameters.append(name="SAM Tails Hydration", min=1.0, value=5.252, max=50.0, fit=True,
                              prior_type="uniform", mu=0.0, sigma=np.inf)
    project.parameters.append(name="SAM Roughness", min=1.0, value=5.64, max=15.0, fit=True, prior_type="uniform",
                              mu=0.0, sigma=np.inf)
    project.parameters.append(name="CW Thickness", min=10.0, value=17.12, max=28.0, fit=True, prior_type="uniform",
                              mu=0.0, sigma=np.inf)
    project.parameters.append(name="CW SLD", min=0.0, value=0.0, max=1e-09, fit=False, prior_type="uniform", mu=0.0,
                              sigma=np.inf)
    project.parameters.append(name="SAM Heads Thickness", min=5.0, value=8.56, max=17.0, fit=True,
                              prior_type="gaussian", mu=10.0, sigma=2.0)
    project.parameters.append(name="SAM Heads SLD", min=1.0e-07, value=1.75e-06, max=2.0e-06, fit=False,
                              prior_type="uniform", mu=0.0, sigma=np.inf)
    project.parameters.append(name="SAM Heads Hydration", min=10.0, value=45.45, max=50.0, fit=True,
                              prior_type="uniform", mu=30.0, sigma=3.0)
    project.parameters.append(name="Bilayer Heads Thickness", min=7.0, value=10.7, max=17.0, fit=True,
                              prior_type="gaussian", mu=10.0, sigma=2.0)
    project.parameters.append(name="Bilayer Heads SLD", min=5.0e-07, value=1.47e-06, max=1.5e-06, fit=False,
                              prior_type="uniform", mu=0.0, sigma=np.inf)
    project.parameters.append(name="Bilayer Roughness", min=2.0, value=6.014, max=15.0, fit=True, prior_type="uniform",
                              mu=0.0, sigma=np.inf)
    project.parameters.append(name="Bilayer Tails Thickness", min=14.0, value=17.82, max=22.0, fit=True,
                              prior_type="uniform", mu=0.0, sigma=np.inf)
    project.parameters.append(name="Bilayer Tails SLD", min=-5.0e-07, value=-4.61e-07, max=0.0, fit=False,
                              prior_type="uniform", mu=0.0, sigma=np.inf)
    project.parameters.append(name="Bilayer Tails Hydration", min=10.0, value=17.64, max=50.0, fit=True,
                              prior_type="uniform", mu=0.0, sigma=np.inf)
    project.parameters.append(name="Bilayer Heads Hydration", min=10.0, value=36.15, max=50.0, fit=True,
                              prior_type="gaussian", mu=30.0, sigma=3.0)
    project.parameters.append(name="CW Hydration", min=99.9, value=100.0, max=100.0, fit=False, prior_type="uniform",
                              mu=0.0, sigma=np.inf)
    project.parameters.append(name="Oxide Hydration", min=0.0, value=23.61, max=60.0, fit=True, prior_type="uniform",
                              mu=0.0, sigma=np.inf)

    project.parameters.set_fields(0, max=10)

    # Group these into layers....
    project.layers.append(name="Oxide", thickness="Oxide Thickness", SLD="Oxide SLD", roughness="Substrate Roughness",
                          hydration="Oxide Hydration", hydrate_with="bulk out")

    project.layers.append(name="SAM Tails", thickness="SAM Tails Thickness", SLD="SAM Tails SLD",
                          roughness="SAM Roughness",
                          hydration="SAM Tails Hydration", hydrate_with="bulk out")

    project.layers.append(name="SAM Heads", thickness="SAM Heads Thickness", SLD="SAM Heads SLD",
                          roughness="SAM Roughness",
                          hydration="SAM Heads Hydration", hydrate_with="bulk out")

    project.layers.append(name="Central Water", thickness="CW Thickness", SLD="CW SLD", roughness="Bilayer Roughness",
                          hydration="CW Hydration", hydrate_with="bulk out")

    project.layers.append(name="Bilayer Heads", thickness="Bilayer Heads Thickness", SLD="Bilayer Heads SLD",
                          roughness="Bilayer Roughness", hydration="Bilayer Heads Hydration", hydrate_with="bulk out")

    project.layers.append(name="Bilayer Tails", thickness="Bilayer Tails Thickness", SLD="Bilayer Tails SLD",
                          roughness="Bilayer Roughness", hydration="Bilayer Tails Hydration", hydrate_with="bulk out")

    # Make the bulk SLDs
    del project.bulk_in[0]
    project.bulk_in.append(name="Silicon", min=2.0e-06, value=2.073e-06, max=2.1e-06, fit=False)

    del project.bulk_out[0]
    project.bulk_out.append(name="D2O", min=5.50e-06, value=5.98e-06, max=6.4e-06, fit=True)
    project.bulk_out.append(name="SMW", min=1.0e-06, value=2.21e-06, max=4.99e-06, fit=True)

    # Set the scalefactors - use one for each contrast
    del project.scalefactors[0]
    project.scalefactors.append(name="Scalefactor 1", min=0.05, value=0.10, max=0.2, fit=False)
    project.scalefactors.append(name="Scalefactor 2", min=0.05, value=0.15, max=0.2, fit=False)

    # Now deal with the backgrounds
    del project.backgrounds[0]
    del project.background_parameters[0]
    project.background_parameters.append(name="Background parameter D2O", min=5.0e-10, value=2.23e-06, max=7.0e-06,
                                         fit=True)
    project.background_parameters.append(name="Background parameter SMW", min=1.0e-10, value=3.38e-06, max=4.99e-06,
                                         fit=True)

    project.backgrounds.append(name="D2O Background", type="constant", value_1="Background parameter D2O")
    project.backgrounds.append(name="SMW Background", type="constant", value_1="Background parameter SMW")

    # Now add the data....

    # Set the model
    stack = ["Oxide", "SAM Tails", "SAM Heads", "Central Water", "Bilayer Heads", "Bilayer Tails", "Bilayer Tails",
             "Bilayer Heads"]

    # Then make the two contrasts
    project.contrasts.append(name="D2O", bulk_in="Silicon", bulk_out="D2O", background="D2O Background",
                             resolution="Resolution 1", scalefactor="Scalefactor 1", data="Simulation", model=stack)

    project.contrasts.append(name="SMW", bulk_in="Silicon", bulk_out="SMW", background="SMW Background",
                             resolution="Resolution 1", scalefactor="Scalefactor 2", data="Simulation", model=stack)

    return project


@pytest.fixture
def reflectivity_calculation_problem():
    """The output C++ ProblemDefinition object for a reflectivity calculation of the project set out in
    "DSPC_standard_layers.py".
    """
    problem = RAT.rat_core.ProblemDefinition()
    problem.TF = Calculations.NonPolarised
    problem.modelType = LayerModels.StandardLayers
    problem.geometry = Geometries.SubstrateLiquid
    problem.useImaginary = False
    problem.params = np.array([3.000e+00, 1.954e+01, 3.390e-06, 2.266e+01, -4.010e-07, 5.252e+00,
                               5.640e+00, 1.712e+01, 0.000e+00, 8.560e+00, 1.750e-06, 4.545e+01,
                               1.070e+01, 1.470e-06, 6.014e+00, 1.782e+01, -4.610e-07, 1.764e+01,
                               3.615e+01, 1.000e+02, 2.361e+01])
    problem.bulkIn = np.array([2.073e-06])
    problem.bulkOut = np.array([5.98e-06, 2.21e-06])
    problem.qzshifts = np.array([0.0])
    problem.scalefactors = np.array([0.1, 0.15])
    problem.domainRatio = np.array([])
    problem.backgroundParams = np.array([2.23e-06, 3.38e-06])
    problem.resolutionParams = np.array([0.03])
    problem.contrastBulkIns = np.array([1.0, 1.0])
    problem.contrastBulkOuts = np.array([1.0, 2.0])
    problem.contrastQzshifts = np.array([0.0, 0.0])
    problem.contrastScalefactors = np.array([1.0, 2.0])
    problem.contrastBackgrounds = np.array([1.0, 2.0])
    problem.contrastBackgroundActions = np.array([1.0, 1.0])
    problem.contrastResolutions = np.array([1.0, 1.0])
    problem.contrastCustomFiles = np.array([np.nan, np.nan])
    problem.contrastDomainRatios = np.array([0.0, 0.0])
    problem.resample = np.array([0.0, 0.0])
    problem.dataPresent = np.array([1.0, 1.0])
    problem.oilChiDataPresent = np.array([0.0, 0.0])
    problem.numberOfContrasts = 2.0
    problem.numberOfLayers = 6.0
    problem.numberOfDomainContrasts = 0.0
    problem.fitParams = np.array([3.000e+00, 1.954e+01, 2.266e+01, 5.252e+00, 5.640e+00, 1.712e+01, 8.560e+00,
                                  4.545e+01, 1.070e+01, 6.014e+00, 1.782e+01, 1.764e+01, 3.615e+01, 2.361e+01,
                                  2.230e-06, 3.380e-06, 5.980e-06, 2.210e-06])
    problem.otherParams = np.array([3.390e-06, -4.010e-07, 0.000e+00, 1.750e-06, 1.470e-06, -4.610e-07,
                                    1.000e+02, 1.000e-01, 1.500e-01, 2.073e-06, 3.000e-02])
    problem.fitLimits = np.array([[1.00e+00, 1.00e+01],
                                  [5.00e+00, 6.00e+01],
                                  [1.50e+01, 3.50e+01],
                                  [1.00e+00, 5.00e+01],
                                  [1.00e+00, 1.50e+01],
                                  [1.00e+01, 2.80e+01],
                                  [5.00e+00, 1.70e+01],
                                  [1.00e+01, 5.00e+01],
                                  [7.00e+00, 1.70e+01],
                                  [2.00e+00, 1.50e+01],
                                  [1.40e+01, 2.20e+01],
                                  [1.00e+01, 5.00e+01],
                                  [1.00e+01, 5.00e+01],
                                  [0.00e+00, 6.00e+01],
                                  [5.00e-10, 7.00e-06],
                                  [1.00e-10, 4.99e-06],
                                  [5.50e-06, 6.40e-06],
                                  [1.00e-06, 4.99e-06]])
    problem.otherLimits = np.array([[3.39e-06, 3.41e-06],
                                    [-5.00e-07, -3.00e-07],
                                    [0.00e+00, 1.00e-09],
                                    [1.00e-07, 2.00e-06],
                                    [5.00e-07, 1.50e-06],
                                    [-5.00e-07, 0.00e+00],
                                    [9.99e+01, 1.00e+02],
                                    [5.00e-02, 2.00e-01],
                                    [5.00e-02, 2.00e-01],
                                    [2.00e-06, 2.10e-06],
                                    [1.00e-02, 5.00e-02]])

    return problem


@pytest.fixture
def dream_problem():
    """The output C++ ProblemDefinition object for a Dream optimisation of the project set out in
    "DSPC_standard_layers.py".

    This optimisation used the parameters: nSamples=50000, nChains=10.
    """
    problem = RAT.rat_core.ProblemDefinition()
    problem.TF = Calculations.NonPolarised
    problem.modelType = LayerModels.StandardLayers
    problem.geometry = Geometries.SubstrateLiquid
    problem.useImaginary = False
    problem.params = np.array([6.19503045e+00, 1.84420960e+01, 3.39000000e-06, 2.11039621e+01,
                               -4.01000000e-07, 8.75538121e+00, 3.72292994e+00, 1.84624551e+01,
                               0.00000000e+00, 1.02316734e+01, 1.75000000e-06, 2.31156093e+01,
                               1.09906265e+01, 1.47000000e-06, 5.71005361e+00, 1.67933822e+01,
                               -4.61000000e-07, 1.72009856e+01, 3.00260126e+01, 1.00000000e+02,
                               2.94448999e+01])
    problem.bulkIn = np.array([2.073e-06])
    problem.bulkOut = np.array([6.01489149e-06, 1.59371685e-06])
    problem.qzshifts = np.array([0.0])
    problem.scalefactors = np.array([0.1, 0.15])
    problem.domainRatio = np.array([])
    problem.backgroundParams = np.array([2.37113128e-06, 1.99006694e-06])
    problem.resolutionParams = np.array([0.03])
    problem.contrastBulkIns = np.array([1.0, 1.0])
    problem.contrastBulkOuts = np.array([1.0, 2.0])
    problem.contrastQzshifts = np.array([0.0, 0.0])
    problem.contrastScalefactors = np.array([1.0, 2.0])
    problem.contrastBackgrounds = np.array([1.0, 2.0])
    problem.contrastBackgroundActions = np.array([1.0, 1.0])
    problem.contrastResolutions = np.array([1.0, 1.0])
    problem.contrastCustomFiles = np.array([np.nan, np.nan])
    problem.contrastDomainRatios = np.array([0.0, 0.0])
    problem.resample = np.array([0.0, 0.0])
    problem.dataPresent = np.array([1.0, 1.0])
    problem.oilChiDataPresent = np.array([0.0, 0.0])
    problem.numberOfContrasts = 2.0
    problem.numberOfLayers = 6.0
    problem.numberOfDomainContrasts = 0.0
    problem.fitParams = np.array([6.19503045e+00, 1.84420960e+01, 2.11039621e+01, 8.75538121e+00,
                                  3.72292994e+00, 1.84624551e+01, 1.02316734e+01, 2.31156093e+01,
                                  1.09906265e+01, 5.71005361e+00, 1.67933822e+01, 1.72009856e+01,
                                  3.00260126e+01, 2.94448999e+01, 2.37113128e-06, 1.99006694e-06,
                                  6.01489149e-06, 1.59371685e-06])
    problem.otherParams = np.array([3.390e-06, -4.010e-07, 0.000e+00, 1.750e-06, 1.470e-06, -4.610e-07,
                                    1.000e+02, 1.000e-01, 1.500e-01, 2.073e-06, 3.000e-02, 0.000e+00])
    problem.fitLimits = np.array([[1.00e+00, 1.00e+01],
                                  [5.00e+00, 6.00e+01],
                                  [1.50e+01, 3.50e+01],
                                  [1.00e+00, 5.00e+01],
                                  [1.00e+00, 1.50e+01],
                                  [1.00e+01, 2.80e+01],
                                  [5.00e+00, 1.70e+01],
                                  [1.00e+01, 5.00e+01],
                                  [7.00e+00, 1.70e+01],
                                  [2.00e+00, 1.50e+01],
                                  [1.40e+01, 2.20e+01],
                                  [1.00e+01, 5.00e+01],
                                  [1.00e+01, 5.00e+01],
                                  [0.00e+00, 6.00e+01],
                                  [5.00e-10, 7.00e-06],
                                  [1.00e-10, 4.99e-06],
                                  [5.50e-06, 6.40e-06],
                                  [1.00e-06, 4.99e-06]])
    problem.otherLimits = np.array([[3.39e-06, 3.41e-06],
                                    [-5.00e-07, -3.00e-07],
                                    [0.00e+00, 1.00e-09],
                                    [1.00e-07, 2.00e-06],
                                    [5.00e-07, 1.50e-06],
                                    [-5.00e-07, 0.00e+00],
                                    [9.99e+01, 1.00e+02],
                                    [5.00e-02, 2.00e-01],
                                    [5.00e-02, 2.00e-01],
                                    [2.00e-06, 2.10e-06],
                                    [1.00e-02, 5.00e-02],
                                    [0.00e+00, 0.00e+00]])

    return problem


@pytest.fixture
def reflectivity_calculation_output_results():
    """The C++ results object for a reflectivity calculation of the project set out in "DSPC_standard_layers.py"."""
    results = RAT.rat_core.OutputResult()
    results.reflectivity = [np.array([[1.14030000e-02, 1.00000223e+00],
                                      [1.38610000e-02, 1.00000223e+00],
                                      [1.68480000e-02, 6.42692703e-02],
                                      [2.04790000e-02, 1.69530247e-02],
                                      [2.48920000e-02, 6.18815370e-03],
                                      [3.02560000e-02, 2.99474163e-03],
                                      [3.67770000e-02, 1.73558265e-03],
                                      [4.47020000e-02, 1.03290554e-03],
                                      [5.43360000e-02, 6.45645642e-04],
                                      [6.60450000e-02, 5.57949197e-04],
                                      [8.02790000e-02, 5.58974858e-04],
                                      [9.75790000e-02, 3.49803750e-04],
                                      [1.18610000e-01, 8.89485853e-05],
                                      [1.44170000e-01, 4.04713900e-05],
                                      [1.75240000e-01, 6.98590391e-06],
                                      [2.13000000e-01, 3.60410795e-06],
                                      [2.58910000e-01, 2.41835671e-06],
                                      [3.14700000e-01, 2.26496635e-06],
                                      [3.82520000e-01, 2.26396064e-06],
                                      [4.64960000e-01, 2.24609517e-06],
                                      [5.65160000e-01, 2.23162115e-06]]),
                            np.array([[1.14030000e-02, 1.53247324e-02],
                                      [1.38610000e-02, 9.89602164e-03],
                                      [1.68480000e-02, 6.26868663e-03],
                                      [2.04790000e-02, 3.83918877e-03],
                                      [2.48920000e-02, 2.21818017e-03],
                                      [3.02560000e-02, 1.15473774e-03],
                                      [3.67770000e-02, 4.92469653e-04],
                                      [4.47020000e-02, 1.37287345e-04],
                                      [5.43360000e-02, 2.28561535e-05],
                                      [6.60450000e-02, 6.63620782e-05],
                                      [8.02790000e-02, 1.36790069e-04],
                                      [9.75790000e-02, 1.15354200e-04],
                                      [1.18610000e-01, 3.73063683e-05],
                                      [1.44170000e-01, 1.21263573e-05],
                                      [1.75240000e-01, 6.59103452e-06],
                                      [2.13000000e-01, 4.38321947e-06],
                                      [2.58910000e-01, 3.40797246e-06],
                                      [3.14700000e-01, 3.41625063e-06],
                                      [3.82520000e-01, 3.40076933e-06],
                                      [4.64960000e-01, 3.38892224e-06],
                                      [5.65160000e-01, 3.38103236e-06]])]
    results.simulation = [np.array([[1.14030000e-02, 1.00000223e+00],
                                    [1.38610000e-02, 1.00000223e+00],
                                    [1.68480000e-02, 6.42692703e-02],
                                    [2.04790000e-02, 1.69530247e-02],
                                    [2.48920000e-02, 6.18815370e-03],
                                    [3.02560000e-02, 2.99474163e-03],
                                    [3.67770000e-02, 1.73558265e-03],
                                    [4.47020000e-02, 1.03290554e-03],
                                    [5.43360000e-02, 6.45645642e-04],
                                    [6.60450000e-02, 5.57949197e-04],
                                    [8.02790000e-02, 5.58974858e-04],
                                    [9.75790000e-02, 3.49803750e-04],
                                    [1.18610000e-01, 8.89485853e-05],
                                    [1.44170000e-01, 4.04713900e-05],
                                    [1.75240000e-01, 6.98590391e-06],
                                    [2.13000000e-01, 3.60410795e-06],
                                    [2.58910000e-01, 2.41835671e-06],
                                    [3.14700000e-01, 2.26496635e-06],
                                    [3.82520000e-01, 2.26396064e-06],
                                    [4.64960000e-01, 2.24609517e-06],
                                    [5.65160000e-01, 2.23162115e-06]]),
                          np.array([[1.14030000e-02, 1.53247324e-02],
                                    [1.38610000e-02, 9.89602164e-03],
                                    [1.68480000e-02, 6.26868663e-03],
                                    [2.04790000e-02, 3.83918877e-03],
                                    [2.48920000e-02, 2.21818017e-03],
                                    [3.02560000e-02, 1.15473774e-03],
                                    [3.67770000e-02, 4.92469653e-04],
                                    [4.47020000e-02, 1.37287345e-04],
                                    [5.43360000e-02, 2.28561535e-05],
                                    [6.60450000e-02, 6.63620782e-05],
                                    [8.02790000e-02, 1.36790069e-04],
                                    [9.75790000e-02, 1.15354200e-04],
                                    [1.18610000e-01, 3.73063683e-05],
                                    [1.44170000e-01, 1.21263573e-05],
                                    [1.75240000e-01, 6.59103452e-06],
                                    [2.13000000e-01, 4.38321947e-06],
                                    [2.58910000e-01, 3.40797246e-06],
                                    [3.14700000e-01, 3.41625063e-06],
                                    [3.82520000e-01, 3.40076933e-06],
                                    [4.64960000e-01, 3.38892224e-06],
                                    [5.65160000e-01, 3.38103236e-06]])]
    results.shiftedData = [np.array([[1.1403e-02, 1.0063e+00, 1.9003e-02],
                                     [1.3861e-02, 9.0118e-01, 1.1774e-02],
                                     [1.6848e-02, 7.0455e-02, 1.3083e-03],
                                     [2.0479e-02, 1.7544e-02, 5.1254e-04],
                                     [2.4892e-02, 6.4257e-03, 2.6236e-04],
                                     [3.0256e-02, 2.7746e-03, 8.5758e-05],
                                     [3.6777e-02, 1.8591e-03, 4.9391e-05],
                                     [4.4702e-02, 1.1002e-03, 3.2644e-05],
                                     [5.4336e-02, 6.6691e-04, 2.1365e-05],
                                     [6.6045e-02, 6.0729e-04, 1.1791e-05],
                                     [8.0279e-02, 5.8755e-04, 1.5569e-05],
                                     [9.7579e-02, 3.2700e-04, 6.5280e-06],
                                     [1.1861e-01, 7.8205e-05, 2.5881e-06],
                                     [1.4417e-01, 3.3455e-05, 1.5143e-06],
                                     [1.7524e-01, 4.9313e-06, 5.6663e-07],
                                     [2.1300e-01, 4.1948e-06, 6.8549e-07],
                                     [2.5891e-01, 3.9863e-06, 8.2061e-07],
                                     [3.1470e-01, 2.0861e-06, 6.1379e-07],
                                     [3.8252e-01, 2.1154e-06, 6.3084e-07],
                                     [4.6496e-01, 1.9906e-06, 6.0793e-07],
                                     [5.6516e-01, 2.3816e-06, 7.0610e-07]]),
                           np.array([[1.14030000e-02, 1.20493333e-02, 7.32200000e-04],
                                     [1.38610000e-02, 6.71800000e-03, 3.71853333e-04],
                                     [1.68480000e-02, 4.10506667e-03, 2.23106667e-04],
                                     [2.04790000e-02, 2.43306667e-03, 1.46873333e-04],
                                     [2.48920000e-02, 1.40940000e-03, 9.59200000e-05],
                                     [3.02560000e-02, 7.43400000e-04, 3.50226667e-05],
                                     [3.67770000e-02, 3.51466667e-04, 1.59573333e-05],
                                     [4.47020000e-02, 9.80666667e-05, 7.29466667e-06],
                                     [5.43360000e-02, 1.73500000e-05, 2.59200000e-06],
                                     [6.60450000e-02, 4.86286667e-05, 2.46453333e-06],
                                     [8.02790000e-02, 9.71733333e-05, 4.68166667e-06],
                                     [9.75790000e-02, 7.06533333e-05, 2.32180000e-06],
                                     [1.18610000e-01, 1.93046667e-05, 1.00813333e-06],
                                     [1.44170000e-01, 6.61193333e-06, 5.29773333e-07],
                                     [1.75240000e-01, 3.23726667e-06, 3.65933333e-07],
                                     [2.13000000e-01, 3.29920000e-06, 4.74273333e-07],
                                     [2.58910000e-01, 1.71180000e-06, 4.24720000e-07],
                                     [3.14700000e-01, 2.24020000e-06, 5.08946667e-07],
                                     [3.82520000e-01, 2.73306667e-06, 5.71513333e-07],
                                     [4.64960000e-01, 2.36153333e-06, 5.24806667e-07],
                                     [5.65160000e-01, 2.17460000e-06, 5.31346667e-07]])]
    results.layerSlds = [[np.array([[1.954000e+01,  4.001499e-06,  3.000000e+00],
                                    [2.266000e+01, -6.586988e-08,  3.000000e+00],
                                    [8.560000e+00,  3.672535e-06,  5.640000e+00],
                                    [1.712000e+01,  5.980000e-06,  5.640000e+00],
                                    [1.070000e+01,  3.100365e-06,  6.014000e+00],
                                    [1.782000e+01,  6.751924e-07,  6.014000e+00],
                                    [1.782000e+01,  6.751924e-07,  6.014000e+00],
                                    [1.070000e+01,  3.100365e-06,  6.014000e+00]])],
                         [np.array([[1.9540000e+01,  3.1114020e-06,  3.0000000e+00],
                                    [2.2660000e+01, -2.6387028e-07,  3.0000000e+00],
                                    [8.5600000e+00,  1.9590700e-06,  5.6400000e+00],
                                    [1.7120000e+01,  2.2100000e-06,  5.6400000e+00],
                                    [1.0700000e+01,  1.7375100e-06,  6.0140000e+00],
                                    [1.7820000e+01,  1.0164400e-08,  6.0140000e+00],
                                    [1.7820000e+01,  1.0164400e-08,  6.0140000e+00],
                                    [1.0700000e+01,  1.7375100e-06,  6.0140000e+00]])]]
    results.sldProfiles = [[np.array([[0.00000000e+00,  2.07300000e-06],
                                      [1.10000000e+01,  2.07300000e-06],
                                      [2.20000000e+01,  2.07300000e-06],
                                      [3.30000000e+01,  2.07300001e-06],
                                      [4.40000000e+01,  2.11687361e-06],
                                      [5.50000000e+01,  3.90933280e-06],
                                      [6.60000000e+01,  3.51748792e-06],
                                      [7.70000000e+01, -2.64615370e-08],
                                      [8.80000000e+01,  8.14665196e-07],
                                      [9.90000000e+01,  4.11508879e-06],
                                      [1.10000000e+02,  5.58392432e-06],
                                      [1.21000000e+02,  3.71785214e-06],
                                      [1.32000000e+02,  1.39304140e-06],
                                      [1.43000000e+02,  6.95745588e-07],
                                      [1.54000000e+02,  7.84170141e-07],
                                      [1.65000000e+02,  2.15552213e-06],
                                      [1.76000000e+02,  4.68458332e-06],
                                      [1.87000000e+02,  5.91563638e-06],
                                      [1.98000000e+02,  5.97982117e-06],
                                      [2.09000000e+02,  5.97999998e-06],
                                      [2.20000000e+02,  5.98000000e-06],
                                      [2.31000000e+02,  5.98000000e-06],
                                      [2.42000000e+02,  5.98000000e-06],
                                      [2.53000000e+02,  5.98000000e-06],
                                      [2.64000000e+02,  5.98000000e-06]]),
                            np.array([[0.00000000e+00,  2.07300000e-06],
                                      [1.10000000e+01,  2.07300000e-06],
                                      [2.20000000e+01,  2.07300000e-06],
                                      [3.30000000e+01,  2.07300001e-06],
                                      [4.40000000e+01,  2.09662378e-06],
                                      [5.50000000e+01,  3.06177428e-06],
                                      [6.60000000e+01,  2.70974796e-06],
                                      [7.70000000e+01, -2.34283042e-07],
                                      [8.80000000e+01,  2.46446429e-07],
                                      [9.90000000e+01,  1.80004279e-06],
                                      [1.10000000e+02,  2.14886270e-06],
                                      [1.21000000e+02,  1.70090192e-06],
                                      [1.32000000e+02,  5.06554250e-07],
                                      [1.43000000e+02,  2.47801381e-08],
                                      [1.54000000e+02,  8.73866316e-08],
                                      [1.65000000e+02,  9.86362863e-07],
                                      [1.76000000e+02,  1.96411923e-06],
                                      [1.87000000e+02,  2.19933821e-06],
                                      [1.98000000e+02,  2.20997064e-06],
                                      [2.09000000e+02,  2.21000000e-06],
                                      [2.20000000e+02,  2.21000000e-06],
                                      [2.31000000e+02,  2.21000000e-06],
                                      [2.42000000e+02,  2.21000000e-06],
                                      [2.53000000e+02,  2.21000000e-06],
                                      [2.64000000e+02,  2.21000000e-06]])]]
    results.resampledLayers = [[np.array([[0.0, 0.0, 0.0]])], [np.array([[0.0, 0.0, 0.0]])]]
    results.calculationResults = RAT.rat_core.Calculation()
    results.calculationResults.chiValues = np.array([202.83057377, 1641.4024969])
    results.calculationResults.sumChi = 1844.2330706690975
    results.contrastParams = RAT.rat_core.ContrastParams()
    results.contrastParams.backgroundParams = np.array([2.23e-06, 3.38e-06])
    results.contrastParams.scalefactors = np.array([0.1, 0.15])
    results.contrastParams.bulkIn = np.array([2.073e-06, 2.073e-06])
    results.contrastParams.bulkOut = np.array([5.98e-06, 2.21e-06])
    results.contrastParams.resolutionParams = np.array([0.03, 0.03])
    results.contrastParams.subRoughs = np.array([3.0, 3.0])
    results.contrastParams.resample = np.array([0.0, 0.0])
    results.fitParams = np.array([3.000e+00, 1.954e+01, 2.266e+01, 5.252e+00, 5.640e+00, 1.712e+01, 8.560e+00,
                                  4.545e+01, 1.070e+01, 6.014e+00, 1.782e+01, 1.764e+01, 3.615e+01, 2.361e+01,
                                  2.230e-06, 3.380e-06, 5.980e-06, 2.210e-06])
    results.fitNames = ['Substrate Roughness', 'Oxide Thickness', 'SAM Tails Thickness', 'SAM Tails Hydration',
                        'SAM Roughness', 'CW Thickness', 'SAM Heads Thickness', 'SAM Heads Hydration',
                        'Bilayer Heads Thickness', 'Bilayer Roughness', 'Bilayer Tails Thickness',
                        'Bilayer Tails Hydration', 'Bilayer Heads Hydration', 'Oxide Hydration',
                        'Background parameter D2O', 'Background parameter SMW', 'D2O', 'SMW']

    return results


@pytest.fixture
def reflectivity_calculation_results():
    """The python results object for a reflectivity calculation of the project set out in "DSPC_standard_layers.py"."""
    return RAT.outputs.Results(
        reflectivity=[np.array([[1.14030000e-02, 1.00000223e+00],
                                [1.38610000e-02, 1.00000223e+00],
                                [1.68480000e-02, 6.42692703e-02],
                                [2.04790000e-02, 1.69530247e-02],
                                [2.48920000e-02, 6.18815370e-03],
                                [3.02560000e-02, 2.99474163e-03],
                                [3.67770000e-02, 1.73558265e-03],
                                [4.47020000e-02, 1.03290554e-03],
                                [5.43360000e-02, 6.45645642e-04],
                                [6.60450000e-02, 5.57949197e-04],
                                [8.02790000e-02, 5.58974858e-04],
                                [9.75790000e-02, 3.49803750e-04],
                                [1.18610000e-01, 8.89485853e-05],
                                [1.44170000e-01, 4.04713900e-05],
                                [1.75240000e-01, 6.98590391e-06],
                                [2.13000000e-01, 3.60410795e-06],
                                [2.58910000e-01, 2.41835671e-06],
                                [3.14700000e-01, 2.26496635e-06],
                                [3.82520000e-01, 2.26396064e-06],
                                [4.64960000e-01, 2.24609517e-06],
                                [5.65160000e-01, 2.23162115e-06]]),
                      np.array([[1.14030000e-02, 1.53247324e-02],
                                [1.38610000e-02, 9.89602164e-03],
                                [1.68480000e-02, 6.26868663e-03],
                                [2.04790000e-02, 3.83918877e-03],
                                [2.48920000e-02, 2.21818017e-03],
                                [3.02560000e-02, 1.15473774e-03],
                                [3.67770000e-02, 4.92469653e-04],
                                [4.47020000e-02, 1.37287345e-04],
                                [5.43360000e-02, 2.28561535e-05],
                                [6.60450000e-02, 6.63620782e-05],
                                [8.02790000e-02, 1.36790069e-04],
                                [9.75790000e-02, 1.15354200e-04],
                                [1.18610000e-01, 3.73063683e-05],
                                [1.44170000e-01, 1.21263573e-05],
                                [1.75240000e-01, 6.59103452e-06],
                                [2.13000000e-01, 4.38321947e-06],
                                [2.58910000e-01, 3.40797246e-06],
                                [3.14700000e-01, 3.41625063e-06],
                                [3.82520000e-01, 3.40076933e-06],
                                [4.64960000e-01, 3.38892224e-06],
                                [5.65160000e-01, 3.38103236e-06]])],
        simulation=[np.array([[1.14030000e-02, 1.00000223e+00],
                              [1.38610000e-02, 1.00000223e+00],
                              [1.68480000e-02, 6.42692703e-02],
                              [2.04790000e-02, 1.69530247e-02],
                              [2.48920000e-02, 6.18815370e-03],
                              [3.02560000e-02, 2.99474163e-03],
                              [3.67770000e-02, 1.73558265e-03],
                              [4.47020000e-02, 1.03290554e-03],
                              [5.43360000e-02, 6.45645642e-04],
                              [6.60450000e-02, 5.57949197e-04],
                              [8.02790000e-02, 5.58974858e-04],
                              [9.75790000e-02, 3.49803750e-04],
                              [1.18610000e-01, 8.89485853e-05],
                              [1.44170000e-01, 4.04713900e-05],
                              [1.75240000e-01, 6.98590391e-06],
                              [2.13000000e-01, 3.60410795e-06],
                              [2.58910000e-01, 2.41835671e-06],
                              [3.14700000e-01, 2.26496635e-06],
                              [3.82520000e-01, 2.26396064e-06],
                              [4.64960000e-01, 2.24609517e-06],
                              [5.65160000e-01, 2.23162115e-06]]),
                    np.array([[1.14030000e-02, 1.53247324e-02],
                              [1.38610000e-02, 9.89602164e-03],
                              [1.68480000e-02, 6.26868663e-03],
                              [2.04790000e-02, 3.83918877e-03],
                              [2.48920000e-02, 2.21818017e-03],
                              [3.02560000e-02, 1.15473774e-03],
                              [3.67770000e-02, 4.92469653e-04],
                              [4.47020000e-02, 1.37287345e-04],
                              [5.43360000e-02, 2.28561535e-05],
                              [6.60450000e-02, 6.63620782e-05],
                              [8.02790000e-02, 1.36790069e-04],
                              [9.75790000e-02, 1.15354200e-04],
                              [1.18610000e-01, 3.73063683e-05],
                              [1.44170000e-01, 1.21263573e-05],
                              [1.75240000e-01, 6.59103452e-06],
                              [2.13000000e-01, 4.38321947e-06],
                              [2.58910000e-01, 3.40797246e-06],
                              [3.14700000e-01, 3.41625063e-06],
                              [3.82520000e-01, 3.40076933e-06],
                              [4.64960000e-01, 3.38892224e-06],
                              [5.65160000e-01, 3.38103236e-06]])],
        shiftedData=[np.array([[1.1403e-02, 1.0063e+00, 1.9003e-02],
                               [1.3861e-02, 9.0118e-01, 1.1774e-02],
                               [1.6848e-02, 7.0455e-02, 1.3083e-03],
                               [2.0479e-02, 1.7544e-02, 5.1254e-04],
                               [2.4892e-02, 6.4257e-03, 2.6236e-04],
                               [3.0256e-02, 2.7746e-03, 8.5758e-05],
                               [3.6777e-02, 1.8591e-03, 4.9391e-05],
                               [4.4702e-02, 1.1002e-03, 3.2644e-05],
                               [5.4336e-02, 6.6691e-04, 2.1365e-05],
                               [6.6045e-02, 6.0729e-04, 1.1791e-05],
                               [8.0279e-02, 5.8755e-04, 1.5569e-05],
                               [9.7579e-02, 3.2700e-04, 6.5280e-06],
                               [1.1861e-01, 7.8205e-05, 2.5881e-06],
                               [1.4417e-01, 3.3455e-05, 1.5143e-06],
                               [1.7524e-01, 4.9313e-06, 5.6663e-07],
                               [2.1300e-01, 4.1948e-06, 6.8549e-07],
                               [2.5891e-01, 3.9863e-06, 8.2061e-07],
                               [3.1470e-01, 2.0861e-06, 6.1379e-07],
                               [3.8252e-01, 2.1154e-06, 6.3084e-07],
                               [4.6496e-01, 1.9906e-06, 6.0793e-07],
                               [5.6516e-01, 2.3816e-06, 7.0610e-07]]),
                     np.array([[1.14030000e-02, 1.20493333e-02, 7.32200000e-04],
                               [1.38610000e-02, 6.71800000e-03, 3.71853333e-04],
                               [1.68480000e-02, 4.10506667e-03, 2.23106667e-04],
                               [2.04790000e-02, 2.43306667e-03, 1.46873333e-04],
                               [2.48920000e-02, 1.40940000e-03, 9.59200000e-05],
                               [3.02560000e-02, 7.43400000e-04, 3.50226667e-05],
                               [3.67770000e-02, 3.51466667e-04, 1.59573333e-05],
                               [4.47020000e-02, 9.80666667e-05, 7.29466667e-06],
                               [5.43360000e-02, 1.73500000e-05, 2.59200000e-06],
                               [6.60450000e-02, 4.86286667e-05, 2.46453333e-06],
                               [8.02790000e-02, 9.71733333e-05, 4.68166667e-06],
                               [9.75790000e-02, 7.06533333e-05, 2.32180000e-06],
                               [1.18610000e-01, 1.93046667e-05, 1.00813333e-06],
                               [1.44170000e-01, 6.61193333e-06, 5.29773333e-07],
                               [1.75240000e-01, 3.23726667e-06, 3.65933333e-07],
                               [2.13000000e-01, 3.29920000e-06, 4.74273333e-07],
                               [2.58910000e-01, 1.71180000e-06, 4.24720000e-07],
                               [3.14700000e-01, 2.24020000e-06, 5.08946667e-07],
                               [3.82520000e-01, 2.73306667e-06, 5.71513333e-07],
                               [4.64960000e-01, 2.36153333e-06, 5.24806667e-07],
                               [5.65160000e-01, 2.17460000e-06, 5.31346667e-07]])],
        layerSlds=[[np.array([[1.954000e+01,  4.001499e-06,  3.000000e+00],
                              [2.266000e+01, -6.586988e-08,  3.000000e+00],
                              [8.560000e+00,  3.672535e-06,  5.640000e+00],
                              [1.712000e+01,  5.980000e-06,  5.640000e+00],
                              [1.070000e+01,  3.100365e-06,  6.014000e+00],
                              [1.782000e+01,  6.751924e-07,  6.014000e+00],
                              [1.782000e+01,  6.751924e-07,  6.014000e+00],
                              [1.070000e+01,  3.100365e-06,  6.014000e+00]])],
                   [np.array([[1.9540000e+01,  3.1114020e-06,  3.0000000e+00],
                              [2.2660000e+01, -2.6387028e-07,  3.0000000e+00],
                              [8.5600000e+00,  1.9590700e-06,  5.6400000e+00],
                              [1.7120000e+01,  2.2100000e-06,  5.6400000e+00],
                              [1.0700000e+01,  1.7375100e-06,  6.0140000e+00],
                              [1.7820000e+01,  1.0164400e-08,  6.0140000e+00],
                              [1.7820000e+01,  1.0164400e-08,  6.0140000e+00],
                              [1.0700000e+01,  1.7375100e-06,  6.0140000e+00]])]],
        sldProfiles=[[np.array([[0.00000000e+00,  2.07300000e-06],
                                [1.10000000e+01,  2.07300000e-06],
                                [2.20000000e+01,  2.07300000e-06],
                                [3.30000000e+01,  2.07300001e-06],
                                [4.40000000e+01,  2.11687361e-06],
                                [5.50000000e+01,  3.90933280e-06],
                                [6.60000000e+01,  3.51748792e-06],
                                [7.70000000e+01, -2.64615370e-08],
                                [8.80000000e+01,  8.14665196e-07],
                                [9.90000000e+01,  4.11508879e-06],
                                [1.10000000e+02,  5.58392432e-06],
                                [1.21000000e+02,  3.71785214e-06],
                                [1.32000000e+02,  1.39304140e-06],
                                [1.43000000e+02,  6.95745588e-07],
                                [1.54000000e+02,  7.84170141e-07],
                                [1.65000000e+02,  2.15552213e-06],
                                [1.76000000e+02,  4.68458332e-06],
                                [1.87000000e+02,  5.91563638e-06],
                                [1.98000000e+02,  5.97982117e-06],
                                [2.09000000e+02,  5.97999998e-06],
                                [2.20000000e+02,  5.98000000e-06],
                                [2.31000000e+02,  5.98000000e-06],
                                [2.42000000e+02,  5.98000000e-06],
                                [2.53000000e+02,  5.98000000e-06],
                                [2.64000000e+02,  5.98000000e-06]]),
                      np.array([[0.00000000e+00,  2.07300000e-06],
                                [1.10000000e+01,  2.07300000e-06],
                                [2.20000000e+01,  2.07300000e-06],
                                [3.30000000e+01,  2.07300001e-06],
                                [4.40000000e+01,  2.09662378e-06],
                                [5.50000000e+01,  3.06177428e-06],
                                [6.60000000e+01,  2.70974796e-06],
                                [7.70000000e+01, -2.34283042e-07],
                                [8.80000000e+01,  2.46446429e-07],
                                [9.90000000e+01,  1.80004279e-06],
                                [1.10000000e+02,  2.14886270e-06],
                                [1.21000000e+02,  1.70090192e-06],
                                [1.32000000e+02,  5.06554250e-07],
                                [1.43000000e+02,  2.47801381e-08],
                                [1.54000000e+02,  8.73866316e-08],
                                [1.65000000e+02,  9.86362863e-07],
                                [1.76000000e+02,  1.96411923e-06],
                                [1.87000000e+02,  2.19933821e-06],
                                [1.98000000e+02,  2.20997064e-06],
                                [2.09000000e+02,  2.21000000e-06],
                                [2.20000000e+02,  2.21000000e-06],
                                [2.31000000e+02,  2.21000000e-06],
                                [2.42000000e+02,  2.21000000e-06],
                                [2.53000000e+02,  2.21000000e-06],
                                [2.64000000e+02,  2.21000000e-06]])]],
        resampledLayers=[[np.array([[0.0, 0.0, 0.0]])], [np.array([[0.0, 0.0, 0.0]])]],
        calculationResults=RAT.outputs.CalculationResults(chiValues=np.array([202.83057377, 1641.4024969]),
                                                          sumChi=1844.2330706690975),
        contrastParams=RAT.outputs.ContrastParams(backgroundParams=np.array([2.23e-06, 3.38e-06]),
                                                  scalefactors=np.array([0.1, 0.15]),
                                                  bulkIn=np.array([2.073e-06, 2.073e-06]),
                                                  bulkOut=np.array([5.98e-06, 2.21e-06]),
                                                  resolutionParams=np.array([0.03, 0.03]),
                                                  subRoughs=np.array([3.0, 3.0]),
                                                  resample=np.array([0.0, 0.0])),
        fitParams=np.array([3.000e+00, 1.954e+01, 2.266e+01, 5.252e+00, 5.640e+00, 1.712e+01, 8.560e+00, 4.545e+01,
                            1.070e+01, 6.014e+00, 1.782e+01, 1.764e+01, 3.615e+01, 2.361e+01, 2.230e-06, 3.380e-06,
                            5.980e-06, 2.210e-06]),
        fitNames=['Substrate Roughness', 'Oxide Thickness', 'SAM Tails Thickness', 'SAM Tails Hydration',
                  'SAM Roughness', 'CW Thickness', 'SAM Heads Thickness', 'SAM Heads Hydration',
                  'Bilayer Heads Thickness', 'Bilayer Roughness', 'Bilayer Tails Thickness',
                  'Bilayer Tails Hydration', 'Bilayer Heads Hydration', 'Oxide Hydration',
                  'Background parameter D2O', 'Background parameter SMW', 'D2O', 'SMW']
    )


@pytest.fixture
def dream_output_results():
    """The C++ results object for a Dream optimisation of the project set out in "DSPC_standard_layers.py".

    This optimisation used the parameters: nSamples=1, nChains=1. However, the calculationResults, contrastParams,
    and fitParams are taken from an optimisation with the parameters: nSamples=50000, nChains=10.
    """
    results = RAT.rat_core.OutputResult()
    results.reflectivity = [np.array([[1.14030000e-02, 1.45891447e+01],
                                      [1.38610000e-02, 1.45739839e+01],
                                      [1.68480000e-02, 1.45684725e+01],
                                      [2.04790000e-02, 1.45658452e+01],
                                      [2.48920000e-02, 1.45641513e+01],
                                      [3.02560000e-02, 1.45628311e+01],
                                      [3.67770000e-02, 1.45618510e+01],
                                      [4.47020000e-02, 1.45613427e+01],
                                      [5.43360000e-02, 1.45612940e+01],
                                      [6.60450000e-02, 1.45613971e+01],
                                      [8.02790000e-02, 1.45613678e+01],
                                      [9.75790000e-02, 1.45612960e+01],
                                      [1.18610000e-01, 1.45612799e+01],
                                      [1.44170000e-01, 1.45612749e+01],
                                      [1.75240000e-01, 1.45612726e+01],
                                      [2.13000000e-01, 1.45612723e+01],
                                      [2.58910000e-01, 1.45612724e+01],
                                      [3.14700000e-01, 1.45612723e+01],
                                      [3.82520000e-01, 1.45612723e+01],
                                      [4.64960000e-01, 1.45612723e+01],
                                      [5.65160000e-01, 1.45612723e+01]]),
                            np.array([[1.14030000e-02, 1.00000316e+00],
                                      [1.38610000e-02, 1.21238320e-01],
                                      [1.68480000e-02, 2.13433068e-02],
                                      [2.04790000e-02, 8.71162144e-03],
                                      [2.48920000e-02, 5.72807902e-03],
                                      [3.02560000e-02, 3.71827525e-03],
                                      [3.67770000e-02, 1.72067772e-03],
                                      [4.47020000e-02, 3.51471141e-04],
                                      [5.43360000e-02, 2.03975460e-05],
                                      [6.60450000e-02, 1.89221181e-04],
                                      [8.02790000e-02, 1.49280488e-04],
                                      [9.75790000e-02, 3.86439083e-05],
                                      [1.18610000e-01, 1.63612094e-05],
                                      [1.44170000e-01, 6.75770325e-06],
                                      [1.75240000e-01, 3.45955607e-06],
                                      [2.13000000e-01, 3.20880782e-06],
                                      [2.58910000e-01, 3.32068345e-06],
                                      [3.14700000e-01, 3.21671807e-06],
                                      [3.82520000e-01, 3.15612021e-06],
                                      [4.64960000e-01, 3.15645546e-06],
                                      [5.65160000e-01, 3.15511510e-06]])]
    results.simulation = [np.array([[1.14030000e-02, 1.45891447e+01],
                                    [1.38610000e-02, 1.45739839e+01],
                                    [1.68480000e-02, 1.45684725e+01],
                                    [2.04790000e-02, 1.45658452e+01],
                                    [2.48920000e-02, 1.45641513e+01],
                                    [3.02560000e-02, 1.45628311e+01],
                                    [3.67770000e-02, 1.45618510e+01],
                                    [4.47020000e-02, 1.45613427e+01],
                                    [5.43360000e-02, 1.45612940e+01],
                                    [6.60450000e-02, 1.45613971e+01],
                                    [8.02790000e-02, 1.45613678e+01],
                                    [9.75790000e-02, 1.45612960e+01],
                                    [1.18610000e-01, 1.45612799e+01],
                                    [1.44170000e-01, 1.45612749e+01],
                                    [1.75240000e-01, 1.45612726e+01],
                                    [2.13000000e-01, 1.45612723e+01],
                                    [2.58910000e-01, 1.45612724e+01],
                                    [3.14700000e-01, 1.45612723e+01],
                                    [3.82520000e-01, 1.45612723e+01],
                                    [4.64960000e-01, 1.45612723e+01],
                                    [5.65160000e-01, 1.45612723e+01]]),
                          np.array([[1.14030000e-02, 1.00000316e+00],
                                    [1.38610000e-02, 1.21238320e-01],
                                    [1.68480000e-02, 2.13433068e-02],
                                    [2.04790000e-02, 8.71162144e-03],
                                    [2.48920000e-02, 5.72807902e-03],
                                    [3.02560000e-02, 3.71827525e-03],
                                    [3.67770000e-02, 1.72067772e-03],
                                    [4.47020000e-02, 3.51471141e-04],
                                    [5.43360000e-02, 2.03975460e-05],
                                    [6.60450000e-02, 1.89221181e-04],
                                    [8.02790000e-02, 1.49280488e-04],
                                    [9.75790000e-02, 3.86439083e-05],
                                    [1.18610000e-01, 1.63612094e-05],
                                    [1.44170000e-01, 6.75770325e-06],
                                    [1.75240000e-01, 3.45955607e-06],
                                    [2.13000000e-01, 3.20880782e-06],
                                    [2.58910000e-01, 3.32068345e-06],
                                    [3.14700000e-01, 3.21671807e-06],
                                    [3.82520000e-01, 3.15612021e-06],
                                    [4.64960000e-01, 3.15645546e-06],
                                    [5.65160000e-01, 3.15511510e-06]])]
    results.shiftedData = [np.array([[1.1403e-02, 1.0063e+00, 1.9003e-02],
                                     [1.3861e-02, 9.0118e-01, 1.1774e-02],
                                     [1.6848e-02, 7.0455e-02, 1.3083e-03],
                                     [2.0479e-02, 1.7544e-02, 5.1254e-04],
                                     [2.4892e-02, 6.4257e-03, 2.6236e-04],
                                     [3.0256e-02, 2.7746e-03, 8.5758e-05],
                                     [3.6777e-02, 1.8591e-03, 4.9391e-05],
                                     [4.4702e-02, 1.1002e-03, 3.2644e-05],
                                     [5.4336e-02, 6.6691e-04, 2.1365e-05],
                                     [6.6045e-02, 6.0729e-04, 1.1791e-05],
                                     [8.0279e-02, 5.8755e-04, 1.5569e-05],
                                     [9.7579e-02, 3.2700e-04, 6.5280e-06],
                                     [1.1861e-01, 7.8205e-05, 2.5881e-06],
                                     [1.4417e-01, 3.3455e-05, 1.5143e-06],
                                     [1.7524e-01, 4.9313e-06, 5.6663e-07],
                                     [2.1300e-01, 4.1948e-06, 6.8549e-07],
                                     [2.5891e-01, 3.9863e-06, 8.2061e-07],
                                     [3.1470e-01, 2.0861e-06, 6.1379e-07],
                                     [3.8252e-01, 2.1154e-06, 6.3084e-07],
                                     [4.6496e-01, 1.9906e-06, 6.0793e-07],
                                     [5.6516e-01, 2.3816e-06, 7.0610e-07]]),
                           np.array([[1.14030000e-02, 1.20493333e-02, 7.32200000e-04],
                                     [1.38610000e-02, 6.71800000e-03, 3.71853333e-04],
                                     [1.68480000e-02, 4.10506667e-03, 2.23106667e-04],
                                     [2.04790000e-02, 2.43306667e-03, 1.46873333e-04],
                                     [2.48920000e-02, 1.40940000e-03, 9.59200000e-05],
                                     [3.02560000e-02, 7.43400000e-04, 3.50226667e-05],
                                     [3.67770000e-02, 3.51466667e-04, 1.59573333e-05],
                                     [4.47020000e-02, 9.80666667e-05, 7.29466667e-06],
                                     [5.43360000e-02, 1.73500000e-05, 2.59200000e-06],
                                     [6.60450000e-02, 4.86286667e-05, 2.46453333e-06],
                                     [8.02790000e-02, 9.71733333e-05, 4.68166667e-06],
                                     [9.75790000e-02, 7.06533333e-05, 2.32180000e-06],
                                     [1.18610000e-01, 1.93046667e-05, 1.00813333e-06],
                                     [1.44170000e-01, 6.61193333e-06, 5.29773333e-07],
                                     [1.75240000e-01, 3.23726667e-06, 3.65933333e-07],
                                     [2.13000000e-01, 3.29920000e-06, 4.74273333e-07],
                                     [2.58910000e-01, 1.71180000e-06, 4.24720000e-07],
                                     [3.14700000e-01, 2.24020000e-06, 5.08946667e-07],
                                     [3.82520000e-01, 2.73306667e-06, 5.71513333e-07],
                                     [4.64960000e-01, 2.36153333e-06, 5.24806667e-07],
                                     [5.65160000e-01, 2.17460000e-06, 5.31346667e-07]])]
    results.layerSlds = [[np.array([[3.15755349e+01, 3.35278238e-06, 4.16625659e+00],
                                    [3.61791464e+01, 7.68327921e-07, 4.16625659e+00],
                                    [1.00488530e+01, 2.06044530e-06, 2.78042232e+01],
                                    [1.08043784e+01, 3.29384190e-06, 2.78042232e+01],
                                    [2.42251646e+01, 2.35556998e-06, 1.55593097e+01],
                                    [1.49022278e+01, 7.42138004e-07, 1.55593097e+01],
                                    [1.49022278e+01, 7.42138004e-07, 1.55593097e+01],
                                    [2.42251646e+01, 2.35556998e-06, 1.55593097e+01]])],
                         [np.array([[3.15755349e+01, 4.11636356e-06, 4.16625659e+00],
                                    [3.61791464e+01, 1.39268494e-06, 4.16625659e+00],
                                    [1.00488530e+01, 2.45715680e-06, 2.78042232e+01],
                                    [1.08043784e+01, 5.26668495e-06, 2.78042232e+01],
                                    [2.42251646e+01, 3.31348777e-06, 1.55593097e+01],
                                    [1.49022278e+01, 1.37428245e-06, 1.55593097e+01],
                                    [1.49022278e+01, 1.37428245e-06, 1.55593097e+01],
                                    [2.42251646e+01, 3.31348777e-06, 1.55593097e+01]])]]
    results.sldProfiles = [[np.array([[0.00000000e+00, 2.07301741e-06],
                                      [1.10000000e+01, 2.07309604e-06],
                                      [2.20000000e+01, 2.07345780e-06],
                                      [3.30000000e+01, 2.07491687e-06],
                                      [4.40000000e+01, 2.17562259e-06],
                                      [5.50000000e+01, 3.22650495e-06],
                                      [6.60000000e+01, 3.40913848e-06],
                                      [7.70000000e+01, 3.13506253e-06],
                                      [8.80000000e+01, 1.20456289e-06],
                                      [9.90000000e+01, 1.27138002e-06],
                                      [1.10000000e+02, 1.56285495e-06],
                                      [1.21000000e+02, 1.84518709e-06],
                                      [1.32000000e+02, 2.00498449e-06],
                                      [1.43000000e+02, 1.96260665e-06],
                                      [1.54000000e+02, 1.71966879e-06],
                                      [1.65000000e+02, 1.39383267e-06],
                                      [1.76000000e+02, 1.22970195e-06],
                                      [1.87000000e+02, 1.41565526e-06],
                                      [1.98000000e+02, 1.88172657e-06],
                                      [2.09000000e+02, 2.40655867e-06],
                                      [2.20000000e+02, 2.83570420e-06],
                                      [2.31000000e+02, 3.11210082e-06],
                                      [2.42000000e+02, 3.24277802e-06],
                                      [2.53000000e+02, 3.28427452e-06],
                                      [2.64000000e+02, 3.29268847e-06],
                                      [2.75000000e+02, 3.29375418e-06],
                                      [2.86000000e+02, 3.29383773e-06],
                                      [2.97000000e+02, 3.29384178e-06],
                                      [3.08000000e+02, 3.29384190e-06]]),
                            np.array([[0.00000000e+00, 2.07301819e-06],
                                      [1.10000000e+01, 2.07310296e-06],
                                      [2.20000000e+01, 2.07350415e-06],
                                      [3.30000000e+01, 2.07518460e-06],
                                      [4.40000000e+01, 2.23394767e-06],
                                      [5.50000000e+01, 3.90646736e-06],
                                      [6.60000000e+01, 4.18619279e-06],
                                      [7.70000000e+01, 3.91675004e-06],
                                      [8.80000000e+01, 1.92451547e-06],
                                      [9.90000000e+01, 2.06988861e-06],
                                      [1.10000000e+02, 2.47614934e-06],
                                      [1.21000000e+02, 2.84889288e-06],
                                      [1.32000000e+02, 3.00529286e-06],
                                      [1.43000000e+02, 2.86310144e-06],
                                      [1.54000000e+02, 2.49967205e-06],
                                      [1.65000000e+02, 2.09673058e-06],
                                      [1.76000000e+02, 1.92431424e-06],
                                      [1.87000000e+02, 2.18829605e-06],
                                      [1.98000000e+02, 2.83032190e-06],
                                      [2.09000000e+02, 3.62584708e-06],
                                      [2.20000000e+02, 4.36871153e-06],
                                      [2.31000000e+02, 4.89806866e-06],
                                      [2.42000000e+02, 5.16145928e-06],
                                      [2.53000000e+02, 5.24684298e-06],
                                      [2.64000000e+02, 5.26428707e-06],
                                      [2.75000000e+02, 5.26650242e-06],
                                      [2.86000000e+02, 5.26667628e-06],
                                      [2.97000000e+02, 5.26668469e-06],
                                      [3.08000000e+02, 5.26668495e-06]])]]
    results.resampledLayers = [[np.array([[0., 0., 0.]])], [np.array([[0., 0., 0.]])]]
    results.calculationResults = RAT.rat_core.Calculation()
    results.calculationResults.chiValues = np.array([4.6077885, 7.00028098]),
    results.calculationResults.sumChi = 11.608069475997699
    results.contrastParams = RAT.rat_core.ContrastParams()
    results.contrastParams.backgroundParams = np.array([2.37113128e-06, 1.99006694e-06])
    results.contrastParams.scalefactors = np.array([0.1, 0.15])
    results.contrastParams.bulkIn = np.array([2.073e-06, 2.073e-06])
    results.contrastParams.bulkOut = np.array([6.01489149e-06, 1.59371685e-06])
    results.contrastParams.resolutionParams = np.array([0.03, 0.03])
    results.contrastParams.subRoughs = np.array([6.19503045, 6.19503045])
    results.contrastParams.resample = np.array([0.0, 0.0])
    results.fitParams = np.array([6.19503045e+00, 1.84420960e+01, 2.11039621e+01, 8.75538121e+00,
                                  3.72292994e+00, 1.84624551e+01, 1.02316734e+01, 2.31156093e+01,
                                  1.09906265e+01, 5.71005361e+00, 1.67933822e+01, 1.72009856e+01,
                                  3.00260126e+01, 2.94448999e+01, 2.37113128e-06, 1.99006694e-06,
                                  6.01489149e-06, 1.59371685e-06])
    results.fitNames = ['Substrate Roughness', 'Oxide Thickness', 'SAM Tails Thickness', 'SAM Tails Hydration',
                        'SAM Roughness', 'CW Thickness', 'SAM Heads Thickness', 'SAM Heads Hydration',
                        'Bilayer Heads Thickness', 'Bilayer Roughness', 'Bilayer Tails Thickness',
                        'Bilayer Tails Hydration', 'Bilayer Heads Hydration', 'Oxide Hydration',
                        'Background parameter D2O', 'Background parameter SMW', 'D2O', 'SMW']

    return results


@pytest.fixture
def dream_bayes():
    """The C++ BayesResults object for a dream optimisation of the project set out in "DSPC_standard_layers.py".

    This optimisation used the parameters: nSamples=1, nChains=1.
    """
    bayes = RAT.rat_core.BayesResults()
    bayes.bestFitMean = RAT.rat_core.BestFitMean()
    bayes.bestFitMean.reflectivity = [np.array([[1.14030000e-02, 1.45891447e+01],
                                                [1.38610000e-02, 1.45739839e+01],
                                                [1.68480000e-02, 1.45684725e+01],
                                                [2.04790000e-02, 1.45658452e+01],
                                                [2.48920000e-02, 1.45641513e+01],
                                                [3.02560000e-02, 1.45628311e+01],
                                                [3.67770000e-02, 1.45618510e+01],
                                                [4.47020000e-02, 1.45613427e+01],
                                                [5.43360000e-02, 1.45612940e+01],
                                                [6.60450000e-02, 1.45613971e+01],
                                                [8.02790000e-02, 1.45613678e+01],
                                                [9.75790000e-02, 1.45612960e+01],
                                                [1.18610000e-01, 1.45612799e+01],
                                                [1.44170000e-01, 1.45612749e+01],
                                                [1.75240000e-01, 1.45612726e+01],
                                                [2.13000000e-01, 1.45612723e+01],
                                                [2.58910000e-01, 1.45612724e+01],
                                                [3.14700000e-01, 1.45612723e+01],
                                                [3.82520000e-01, 1.45612723e+01],
                                                [4.64960000e-01, 1.45612723e+01],
                                                [5.65160000e-01, 1.45612723e+01]]),
                                      np.array([[1.14030000e-02, 1.00000316e+00],
                                                [1.38610000e-02, 1.21238320e-01],
                                                [1.68480000e-02, 2.13433068e-02],
                                                [2.04790000e-02, 8.71162144e-03],
                                                [2.48920000e-02, 5.72807902e-03],
                                                [3.02560000e-02, 3.71827525e-03],
                                                [3.67770000e-02, 1.72067772e-03],
                                                [4.47020000e-02, 3.51471141e-04],
                                                [5.43360000e-02, 2.03975460e-05],
                                                [6.60450000e-02, 1.89221181e-04],
                                                [8.02790000e-02, 1.49280488e-04],
                                                [9.75790000e-02, 3.86439083e-05],
                                                [1.18610000e-01, 1.63612094e-05],
                                                [1.44170000e-01, 6.75770325e-06],
                                                [1.75240000e-01, 3.45955607e-06],
                                                [2.13000000e-01, 3.20880782e-06],
                                                [2.58910000e-01, 3.32068345e-06],
                                                [3.14700000e-01, 3.21671807e-06],
                                                [3.82520000e-01, 3.15612021e-06],
                                                [4.64960000e-01, 3.15645546e-06],
                                                [5.65160000e-01, 3.15511510e-06]])]
    bayes.bestFitMean.sld = [[np.array([[0.00000000e+00, 2.07301741e-06],
                                        [1.10000000e+01, 2.07309604e-06],
                                        [2.20000000e+01, 2.07345780e-06],
                                        [3.30000000e+01, 2.07491687e-06],
                                        [4.40000000e+01, 2.17562259e-06],
                                        [5.50000000e+01, 3.22650495e-06],
                                        [6.60000000e+01, 3.40913848e-06],
                                        [7.70000000e+01, 3.13506253e-06],
                                        [8.80000000e+01, 1.20456289e-06],
                                        [9.90000000e+01, 1.27138002e-06],
                                        [1.10000000e+02, 1.56285495e-06],
                                        [1.21000000e+02, 1.84518709e-06],
                                        [1.32000000e+02, 2.00498449e-06],
                                        [1.43000000e+02, 1.96260665e-06],
                                        [1.54000000e+02, 1.71966879e-06],
                                        [1.65000000e+02, 1.39383267e-06],
                                        [1.76000000e+02, 1.22970195e-06],
                                        [1.87000000e+02, 1.41565526e-06],
                                        [1.98000000e+02, 1.88172657e-06],
                                        [2.09000000e+02, 2.40655867e-06],
                                        [2.20000000e+02, 2.83570420e-06],
                                        [2.31000000e+02, 3.11210082e-06],
                                        [2.42000000e+02, 3.24277802e-06],
                                        [2.53000000e+02, 3.28427452e-06],
                                        [2.64000000e+02, 3.29268847e-06],
                                        [2.75000000e+02, 3.29375418e-06],
                                        [2.86000000e+02, 3.29383773e-06],
                                        [2.97000000e+02, 3.29384178e-06],
                                        [3.08000000e+02, 3.29384190e-06]]),
                              np.array([[0.00000000e+00, 2.07301819e-06],
                                        [1.10000000e+01, 2.07310296e-06],
                                        [2.20000000e+01, 2.07350415e-06],
                                        [3.30000000e+01, 2.07518460e-06],
                                        [4.40000000e+01, 2.23394767e-06],
                                        [5.50000000e+01, 3.90646736e-06],
                                        [6.60000000e+01, 4.18619279e-06],
                                        [7.70000000e+01, 3.91675004e-06],
                                        [8.80000000e+01, 1.92451547e-06],
                                        [9.90000000e+01, 2.06988861e-06],
                                        [1.10000000e+02, 2.47614934e-06],
                                        [1.21000000e+02, 2.84889288e-06],
                                        [1.32000000e+02, 3.00529286e-06],
                                        [1.43000000e+02, 2.86310144e-06],
                                        [1.54000000e+02, 2.49967205e-06],
                                        [1.65000000e+02, 2.09673058e-06],
                                        [1.76000000e+02, 1.92431424e-06],
                                        [1.87000000e+02, 2.18829605e-06],
                                        [1.98000000e+02, 2.83032190e-06],
                                        [2.09000000e+02, 3.62584708e-06],
                                        [2.20000000e+02, 4.36871153e-06],
                                        [2.31000000e+02, 4.89806866e-06],
                                        [2.42000000e+02, 5.16145928e-06],
                                        [2.53000000e+02, 5.24684298e-06],
                                        [2.64000000e+02, 5.26428707e-06],
                                        [2.75000000e+02, 5.26650242e-06],
                                        [2.86000000e+02, 5.26667628e-06],
                                        [2.97000000e+02, 5.26668469e-06],
                                        [3.08000000e+02, 5.26668495e-06]])]]
    bayes.bestFitMean.chi = 3653339067134688.5
    bayes.bestFitMean.data = [np.array([[1.1403e-02, 1.0063e+00, 1.9003e-02],
                                        [1.3861e-02, 9.0118e-01, 1.1774e-02],
                                        [1.6848e-02, 7.0455e-02, 1.3083e-03],
                                        [2.0479e-02, 1.7544e-02, 5.1254e-04],
                                        [2.4892e-02, 6.4257e-03, 2.6236e-04],
                                        [3.0256e-02, 2.7746e-03, 8.5758e-05],
                                        [3.6777e-02, 1.8591e-03, 4.9391e-05],
                                        [4.4702e-02, 1.1002e-03, 3.2644e-05],
                                        [5.4336e-02, 6.6691e-04, 2.1365e-05],
                                        [6.6045e-02, 6.0729e-04, 1.1791e-05],
                                        [8.0279e-02, 5.8755e-04, 1.5569e-05],
                                        [9.7579e-02, 3.2700e-04, 6.5280e-06],
                                        [1.1861e-01, 7.8205e-05, 2.5881e-06],
                                        [1.4417e-01, 3.3455e-05, 1.5143e-06],
                                        [1.7524e-01, 4.9313e-06, 5.6663e-07],
                                        [2.1300e-01, 4.1948e-06, 6.8549e-07],
                                        [2.5891e-01, 3.9863e-06, 8.2061e-07],
                                        [3.1470e-01, 2.0861e-06, 6.1379e-07],
                                        [3.8252e-01, 2.1154e-06, 6.3084e-07],
                                        [4.6496e-01, 1.9906e-06, 6.0793e-07],
                                        [5.6516e-01, 2.3816e-06, 7.0610e-07]]),
                              np.array([[1.14030000e-02, 1.20493333e-02, 7.32200000e-04],
                                        [1.38610000e-02, 6.71800000e-03, 3.71853333e-04],
                                        [1.68480000e-02, 4.10506667e-03, 2.23106667e-04],
                                        [2.04790000e-02, 2.43306667e-03, 1.46873333e-04],
                                        [2.48920000e-02, 1.40940000e-03, 9.59200000e-05],
                                        [3.02560000e-02, 7.43400000e-04, 3.50226667e-05],
                                        [3.67770000e-02, 3.51466667e-04, 1.59573333e-05],
                                        [4.47020000e-02, 9.80666667e-05, 7.29466667e-06],
                                        [5.43360000e-02, 1.73500000e-05, 2.59200000e-06],
                                        [6.60450000e-02, 4.86286667e-05, 2.46453333e-06],
                                        [8.02790000e-02, 9.71733333e-05, 4.68166667e-06],
                                        [9.75790000e-02, 7.06533333e-05, 2.32180000e-06],
                                        [1.18610000e-01, 1.93046667e-05, 1.00813333e-06],
                                        [1.44170000e-01, 6.61193333e-06, 5.29773333e-07],
                                        [1.75240000e-01, 3.23726667e-06, 3.65933333e-07],
                                        [2.13000000e-01, 3.29920000e-06, 4.74273333e-07],
                                        [2.58910000e-01, 1.71180000e-06, 4.24720000e-07],
                                        [3.14700000e-01, 2.24020000e-06, 5.08946667e-07],
                                        [3.82520000e-01, 2.73306667e-06, 5.71513333e-07],
                                        [4.64960000e-01, 2.36153333e-06, 5.24806667e-07],
                                        [5.65160000e-01, 2.17460000e-06, 5.31346667e-07]])]
    bayes.predictionIntervals = RAT.rat_core.PredictionIntervals()
    bayes.predictionIntervals.reflectivity = [np.array([[1.00000560e+00, 7.07687612e-01, 2.08315160e-02, 2.40787966e-03,
                                                         2.17627660e-03, 2.54301700e-03, 1.76309827e-03, 6.15269679e-04,
                                                         3.43679710e-05, 7.93625275e-05, 1.27760549e-04, 3.35799941e-05,
                                                         6.75048751e-06, 7.64258431e-06, 6.05800395e-06, 5.60288298e-06,
                                                         5.60333677e-06, 5.60223341e-06, 5.60206667e-06, 5.60206314e-06,
                                                         5.60206314e-06],
                                                        [1.00000560e+00, 7.07687612e-01, 2.08315160e-02, 2.40787966e-03,
                                                         2.17627660e-03, 2.54301700e-03, 1.76309827e-03, 6.15269679e-04,
                                                         3.43679710e-05, 7.93625275e-05, 1.27760549e-04, 3.35799941e-05,
                                                         6.75048751e-06, 7.64258431e-06, 6.05800395e-06, 5.60288298e-06,
                                                         5.60333677e-06, 5.60223341e-06, 5.60206667e-06, 5.60206314e-06,
                                                         5.60206314e-06],
                                                        [1.55201098e+01, 1.53748894e+01, 1.50402011e+01, 1.50299478e+01,
                                                         1.50290525e+01, 1.50287935e+01, 1.50282126e+01, 1.50276044e+01,
                                                         1.50273248e+01, 1.50273185e+01, 1.50272997e+01, 1.50272498e+01,
                                                         1.50272364e+01, 1.50272347e+01, 1.50272335e+01, 1.50272330e+01,
                                                         1.50272329e+01, 1.50272328e+01, 1.50272328e+01, 1.50272328e+01,
                                                         1.50272328e+01],
                                                        [2.91397425e+01, 2.91324974e+01, 2.91281368e+01, 2.91255472e+01,
                                                         2.91240295e+01, 2.91231836e+01, 2.91227893e+01, 2.91226872e+01,
                                                         2.91226902e+01, 2.91226359e+01, 2.91225541e+01, 2.91225457e+01,
                                                         2.91225448e+01, 2.91225407e+01, 2.91225398e+01, 2.91225393e+01,
                                                         2.91225391e+01, 2.91225390e+01, 2.91225390e+01, 2.91225389e+01,
                                                         2.91225389e+01],
                                                        [2.91397425e+01, 2.91324974e+01, 2.91281368e+01, 2.91255472e+01,
                                                         2.91240295e+01, 2.91231836e+01, 2.91227893e+01, 2.91226872e+01,
                                                         2.91226902e+01, 2.91226359e+01, 2.91225541e+01, 2.91225457e+01,
                                                         2.91225448e+01, 2.91225407e+01, 2.91225398e+01, 2.91225393e+01,
                                                         2.91225391e+01, 2.91225390e+01, 2.91225390e+01, 2.91225389e+01,
                                                         2.91225389e+01]]),
                                              np.array([[7.82198834e-01, 2.84434275e-02, 3.42472318e-03, 1.45801296e-03,
                                                         2.02213149e-03, 2.00826891e-03, 1.27577246e-03, 4.27099544e-04,
                                                         2.07304219e-05, 4.88683542e-05, 4.14000873e-05, 1.57801531e-05,
                                                         2.08705254e-06, 2.27936213e-06, 1.09950377e-06, 7.09021331e-07,
                                                         7.09539552e-07, 7.08228574e-07, 7.08101644e-07, 7.08098642e-07,
                                                         7.08098641e-07],
                                                        [7.82198834e-01, 2.84434275e-02, 3.42472318e-03, 1.45801296e-03,
                                                         2.02213149e-03, 2.00826891e-03, 1.27577246e-03, 4.27099544e-04,
                                                         2.07304219e-05, 4.88683542e-05, 4.14000873e-05, 1.57801531e-05,
                                                         2.08705254e-06, 2.27936213e-06, 1.09950377e-06, 7.09021331e-07,
                                                         7.09539552e-07, 7.08228574e-07, 7.08101644e-07, 7.08098642e-07,
                                                         7.08098641e-07],
                                                        [8.94587126e-01, 4.07514176e-01, 3.66355642e-02, 1.22207690e-02,
                                                         5.91350591e-03, 3.17495745e-03, 1.50593011e-03, 5.80889579e-04,
                                                         2.44654124e-04, 1.40925782e-04, 6.26965047e-05, 1.91064075e-05,
                                                         9.45189755e-06, 6.16421495e-06, 5.17046678e-06, 4.24101973e-06,
                                                         3.82067554e-06, 3.55352666e-06, 3.38981154e-06, 3.29631224e-06,
                                                         3.25061722e-06],
                                                        [1.00000560e+00, 7.63076662e-01, 6.77868181e-02, 2.23160672e-02,
                                                         9.56355479e-03, 4.26929321e-03, 1.72181442e-03, 7.25142247e-04,
                                                         4.54691084e-04, 2.27274223e-04, 8.54009496e-05, 2.26525796e-05,
                                                         1.63600080e-05, 9.80814666e-06, 8.98896697e-06, 7.55397947e-06,
                                                         6.73887287e-06, 6.22237216e-06, 5.90521384e-06, 5.72401646e-06,
                                                         5.63546023e-06],
                                                        [1.00000560e+00, 7.63076662e-01, 6.77868181e-02, 2.23160672e-02,
                                                         9.56355479e-03, 4.26929321e-03, 1.72181442e-03, 7.25142247e-04,
                                                         4.54691084e-04, 2.27274223e-04, 8.54009496e-05, 2.26525796e-05,
                                                         1.63600080e-05, 9.80814666e-06, 8.98896697e-06, 7.55397947e-06,
                                                         6.73887287e-06, 6.22237216e-06, 5.90521384e-06, 5.72401646e-06,
                                                         5.63546023e-06]])]
    bayes.predictionIntervals.sld = [[np.array([[-2.26996619e-06, -2.26938579e-06, -2.26877469e-06, ...,
                                                 9.14568096e-07,  9.14567880e-07,  9.14567682e-07],
                                                [-2.26996619e-06, -2.26938579e-06, -2.26877469e-06, ...,
                                                 9.14568096e-07,  9.14567880e-07,  9.14567682e-07],
                                                [-1.67970553e-07, -1.67671068e-07, -1.67355735e-07, ...,
                                                 3.31763635e-06,  3.31763624e-06,  3.31763614e-06],
                                                [2.07300000e-06,  2.07300000e-06,  2.07300001e-06, ...,
                                                 5.87958515e-06,  5.87958515e-06,  5.87958515e-06],
                                                [2.07300000e-06,  2.07300000e-06,  2.07300001e-06, ...,
                                                 5.87958515e-06,  5.87958515e-06,  5.87958515e-06]])],
                                     [np.array([[-1.35107208e-06, -1.34966627e-06, -1.34817823e-06, ...,
                                                 4.65378475e-06,  4.65378475e-06,  4.65378475e-06],
                                                [-1.35107208e-06, -1.34966627e-06, -1.34817823e-06, ...,
                                                 4.65378475e-06,  4.65378475e-06,  4.65378475e-06],
                                                [3.06178804e-07,  3.06904206e-07,  3.07672036e-07, ...,
                                                 4.92477587e-06,  4.92477714e-06,  4.92477830e-06],
                                                [2.07300000e-06,  2.07300000e-06,  2.07300001e-06, ...,
                                                 5.17896134e-06,  5.17896381e-06,  5.17896605e-06],
                                                [2.07300000e-06,  2.07300000e-06,  2.07300001e-06, ...,
                                                 5.17896134e-06,  5.17896381e-06,  5.17896605e-06]])]]
    bayes.predictionIntervals.reflectivityXData = [np.array([[0.011403, 0.013861, 0.016848, 0.020479, 0.024892, 0.030256,
                                                              0.036777, 0.044702, 0.054336, 0.066045, 0.080279, 0.097579,
                                                              0.11861, 0.14417, 0.17524, 0.213, 0.25891, 0.3147,
                                                              0.38252, 0.46496, 0.56516]]),
                                                   np.array([[0.011403, 0.013861, 0.016848, 0.020479, 0.024892, 0.030256,
                                                              0.036777, 0.044702, 0.054336, 0.066045, 0.080279, 0.097579,
                                                              0.11861, 0.14417, 0.17524, 0.213, 0.25891, 0.3147,
                                                              0.38252, 0.46496, 0.56516]])]
    bayes.predictionIntervals.sldXData = [[np.array([[0.,  11.,  22.,  33.,  44.,  55.,  66.,  77.,  88.,  99., 110.,
                                                      121., 132., 143., 154., 165., 176., 187., 198., 209., 220., 231.,
                                                      242., 253., 264., 275., 286., 297., 308., 319.]]),
                                           np.array([[0.,  11.,  22.,  33.,  44.,  55.,  66.,  77.,  88.,  99., 110.,
                                                      121., 132., 143., 154., 165., 176., 187., 198., 209., 220., 231.,
                                                      242., 253., 264., 275., 286., 297., 308., 319.]])]]
    bayes.predictionIntervals.sampleChi = np.array([1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                                    1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                                    1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                                    1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                                    1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16])
    bayes.confidenceIntervals = RAT.rat_core.ConfidenceIntervals()
    bayes.confidenceIntervals.percentile65 = np.array([[-1.29074586e-231, 8.33251318e+000, 1.75397363e+001, 1.75397363e+001,
                                                        9.85302945e+000, 9.85302945e+000, 8.34197863e+000, 8.34197863e+000,
                                                        1.65750684e+001, 1.45435510e+001, 1.45435510e+001, 1.52609047e+001,
                                                        4.82866779e+001, 2.91225389e+001, 5.60206314e-006, 7.08098641e-007,
                                                        7.08098641e-007, 4.65378475e-006],
                                                       [8.33251318e+000, 5.48185565e+001, 5.48185565e+001, 4.57554170e+001,
                                                        4.57554170e+001, 1.17557273e+001, 1.17557273e+001, 3.18752608e+001,
                                                        3.18752608e+001, 1.65750684e+001, 1.52609047e+001, 4.88237113e+001,
                                                        4.88237113e+001, 4.82866779e+001, 2.91225389e+001, 5.60206314e-006,
                                                        5.87958515e-006, 5.87958515e-006]])
    bayes.confidenceIntervals.percentile95 = np.array([[-1.29074586e-231, 8.33251318e+000, 1.75397363e+001, 1.75397363e+001,
                                                        9.85302945e+000, 9.85302945e+000, 8.34197863e+000, 8.34197863e+000,
                                                        1.65750684e+001, 1.45435510e+001, 1.45435510e+001, 1.52609047e+001,
                                                        4.82866779e+001, 2.91225389e+001, 5.60206314e-006, 7.08098641e-007,
                                                        7.08098641e-007, 4.65378475e-006],
                                                       [8.33251318e+000, 5.48185565e+001, 5.48185565e+001, 4.57554170e+001,
                                                        4.57554170e+001, 1.17557273e+001, 1.17557273e+001, 3.18752608e+001,
                                                        3.18752608e+001, 1.65750684e+001, 1.52609047e+001, 4.88237113e+001,
                                                        4.88237113e+001, 4.82866779e+001, 2.91225389e+001, 5.60206314e-006,
                                                        5.87958515e-006, 5.87958515e-006]])
    bayes.confidenceIntervals.mean = np.array([[4.16625659e+00, 3.15755349e+01, 3.61791464e+01, 3.16475766e+01,
                                                2.78042232e+01, 1.08043784e+01, 1.00488530e+01, 2.01086197e+01,
                                                2.42251646e+01, 1.55593097e+01, 1.49022278e+01, 3.20423080e+01,
                                                4.85551946e+01, 3.87046084e+01, 1.45612723e+01, 3.15508089e-06,
                                                3.29384190e-06, 5.26668495e-06]])
    bayes.dreamParams = RAT.rat_core.DreamParams()
    bayes.dreamParams.nParams = 18.0
    bayes.dreamParams.nChains = 1.0
    bayes.dreamParams.nGenerations = 1.0
    bayes.dreamParams.parallel = 0
    bayes.dreamParams.CPU = 1.0
    bayes.dreamParams.jumpProbability = 0.5
    bayes.dreamParams.pUnitGamma = 0.2
    bayes.dreamParams.nCR = 3.0
    bayes.dreamParams.delta = 3.0
    bayes.dreamParams.steps = 50.0
    bayes.dreamParams.zeta = 1e-12
    bayes.dreamParams.outlier = "iqr"
    bayes.dreamParams.adaptPCR = 0
    bayes.dreamParams.thinning = 1.0
    bayes.dreamParams.epsilon = 0.025
    bayes.dreamParams.ABC = 0
    bayes.dreamParams.IO = 0
    bayes.dreamParams.storeOutput = 0
    bayes.dreamParams.R = np.array([[0.]])
    bayes.dreamOutput = RAT.rat_core.DreamOutput()
    bayes.dreamOutput.allChains = np.array([[[8.33251318e+00],
                                             [5.48185565e+01],
                                             [1.75397363e+01],
                                             [4.57554170e+01],
                                             [9.85302945e+00],
                                             [1.17557273e+01],
                                             [8.34197863e+00],
                                             [3.18752608e+01],
                                             [1.65750684e+01],
                                             [1.45435510e+01],
                                             [1.52609047e+01],
                                             [4.88237113e+01],
                                             [4.82866779e+01],
                                             [2.91225389e+01],
                                             [5.60206314e-06],
                                             [7.08098641e-07],
                                             [5.87958515e-06],
                                             [4.65378475e-06],
                                             [-4.86509830e+01],
                                             [-5.63741277e+05]]])
    bayes.dreamOutput.outlierChains = np.array([[0.0, 0.0]])
    bayes.dreamOutput.runtime = 2.6e-06
    bayes.dreamOutput.iteration = 2.0
    bayes.dreamOutput.modelOutput = 0.0
    bayes.dreamOutput.AR = np.array([[1.0, np.nan]])
    bayes.dreamOutput.R_stat = np.array([[1.0, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                                          np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan]])
    bayes.dreamOutput.CR = np.array([[1.00000000, 0.33333333, 0.33333333, 0.33333333]])
    bayes.nestedSamplerOutput = RAT.rat_core.NestedSamplerOutput()
    bayes.nestedSamplerOutput.logZ = 0.0
    bayes.nestedSamplerOutput.nestSamples = np.array([[0.0, 0.0]])
    bayes.nestedSamplerOutput.postSamples = np.array([[0.0, 0.0]])
    bayes.chain = np.array([[-1.29231905e-231, 8.33251318e+000, 5.48185565e+001, 1.75397363e+001,
                             4.57554170e+001, 9.85302945e+000, 1.17557273e+001, 8.34197863e+000,
                             3.18752608e+001, 1.65750684e+001, 1.45435510e+001, 1.52609047e+001,
                             4.88237113e+001, 4.82866779e+001, 2.91225389e+001, 5.60206314e-006,
                             7.08098641e-007, 5.87958515e-006],
                            [8.33251318e+000, 5.48185565e+001, 1.75397363e+001, 4.57554170e+001,
                             9.85302945e+000, 1.17557273e+001, 8.34197863e+000, 3.18752608e+001,
                             1.65750684e+001, 1.45435510e+001, 1.52609047e+001, 4.88237113e+001,
                             4.82866779e+001, 2.91225389e+001, 5.60206314e-006, 7.08098641e-007,
                             5.87958515e-006, 4.65378475e-006]])

    return bayes


@pytest.fixture
def dream_results():
    """The python BayesResults object for a Dream optimisation of the project set out in "DSPC_standard_layers.py".

    This optimisation used the parameters: nSamples=1, nChains=1. However, the calculationResults, contrastParams,
    and fitParams are taken from an optimisation with the parameters: nSamples=50000, nChains=10.
    """
    return RAT.outputs.BayesResults(
        reflectivity=[np.array([[1.14030000e-02, 1.45891447e+01],
                                [1.38610000e-02, 1.45739839e+01],
                                [1.68480000e-02, 1.45684725e+01],
                                [2.04790000e-02, 1.45658452e+01],
                                [2.48920000e-02, 1.45641513e+01],
                                [3.02560000e-02, 1.45628311e+01],
                                [3.67770000e-02, 1.45618510e+01],
                                [4.47020000e-02, 1.45613427e+01],
                                [5.43360000e-02, 1.45612940e+01],
                                [6.60450000e-02, 1.45613971e+01],
                                [8.02790000e-02, 1.45613678e+01],
                                [9.75790000e-02, 1.45612960e+01],
                                [1.18610000e-01, 1.45612799e+01],
                                [1.44170000e-01, 1.45612749e+01],
                                [1.75240000e-01, 1.45612726e+01],
                                [2.13000000e-01, 1.45612723e+01],
                                [2.58910000e-01, 1.45612724e+01],
                                [3.14700000e-01, 1.45612723e+01],
                                [3.82520000e-01, 1.45612723e+01],
                                [4.64960000e-01, 1.45612723e+01],
                                [5.65160000e-01, 1.45612723e+01]]),
                      np.array([[1.14030000e-02, 1.00000316e+00],
                                [1.38610000e-02, 1.21238320e-01],
                                [1.68480000e-02, 2.13433068e-02],
                                [2.04790000e-02, 8.71162144e-03],
                                [2.48920000e-02, 5.72807902e-03],
                                [3.02560000e-02, 3.71827525e-03],
                                [3.67770000e-02, 1.72067772e-03],
                                [4.47020000e-02, 3.51471141e-04],
                                [5.43360000e-02, 2.03975460e-05],
                                [6.60450000e-02, 1.89221181e-04],
                                [8.02790000e-02, 1.49280488e-04],
                                [9.75790000e-02, 3.86439083e-05],
                                [1.18610000e-01, 1.63612094e-05],
                                [1.44170000e-01, 6.75770325e-06],
                                [1.75240000e-01, 3.45955607e-06],
                                [2.13000000e-01, 3.20880782e-06],
                                [2.58910000e-01, 3.32068345e-06],
                                [3.14700000e-01, 3.21671807e-06],
                                [3.82520000e-01, 3.15612021e-06],
                                [4.64960000e-01, 3.15645546e-06],
                                [5.65160000e-01, 3.15511510e-06]])],
        simulation=[np.array([[1.14030000e-02, 1.45891447e+01],
                              [1.38610000e-02, 1.45739839e+01],
                              [1.68480000e-02, 1.45684725e+01],
                              [2.04790000e-02, 1.45658452e+01],
                              [2.48920000e-02, 1.45641513e+01],
                              [3.02560000e-02, 1.45628311e+01],
                              [3.67770000e-02, 1.45618510e+01],
                              [4.47020000e-02, 1.45613427e+01],
                              [5.43360000e-02, 1.45612940e+01],
                              [6.60450000e-02, 1.45613971e+01],
                              [8.02790000e-02, 1.45613678e+01],
                              [9.75790000e-02, 1.45612960e+01],
                              [1.18610000e-01, 1.45612799e+01],
                              [1.44170000e-01, 1.45612749e+01],
                              [1.75240000e-01, 1.45612726e+01],
                              [2.13000000e-01, 1.45612723e+01],
                              [2.58910000e-01, 1.45612724e+01],
                              [3.14700000e-01, 1.45612723e+01],
                              [3.82520000e-01, 1.45612723e+01],
                              [4.64960000e-01, 1.45612723e+01],
                              [5.65160000e-01, 1.45612723e+01]]),
                    np.array([[1.14030000e-02, 1.00000316e+00],
                              [1.38610000e-02, 1.21238320e-01],
                              [1.68480000e-02, 2.13433068e-02],
                              [2.04790000e-02, 8.71162144e-03],
                              [2.48920000e-02, 5.72807902e-03],
                              [3.02560000e-02, 3.71827525e-03],
                              [3.67770000e-02, 1.72067772e-03],
                              [4.47020000e-02, 3.51471141e-04],
                              [5.43360000e-02, 2.03975460e-05],
                              [6.60450000e-02, 1.89221181e-04],
                              [8.02790000e-02, 1.49280488e-04],
                              [9.75790000e-02, 3.86439083e-05],
                              [1.18610000e-01, 1.63612094e-05],
                              [1.44170000e-01, 6.75770325e-06],
                              [1.75240000e-01, 3.45955607e-06],
                              [2.13000000e-01, 3.20880782e-06],
                              [2.58910000e-01, 3.32068345e-06],
                              [3.14700000e-01, 3.21671807e-06],
                              [3.82520000e-01, 3.15612021e-06],
                              [4.64960000e-01, 3.15645546e-06],
                              [5.65160000e-01, 3.15511510e-06]])],
        shiftedData=[np.array([[1.1403e-02, 1.0063e+00, 1.9003e-02],
                               [1.3861e-02, 9.0118e-01, 1.1774e-02],
                               [1.6848e-02, 7.0455e-02, 1.3083e-03],
                               [2.0479e-02, 1.7544e-02, 5.1254e-04],
                               [2.4892e-02, 6.4257e-03, 2.6236e-04],
                               [3.0256e-02, 2.7746e-03, 8.5758e-05],
                               [3.6777e-02, 1.8591e-03, 4.9391e-05],
                               [4.4702e-02, 1.1002e-03, 3.2644e-05],
                               [5.4336e-02, 6.6691e-04, 2.1365e-05],
                               [6.6045e-02, 6.0729e-04, 1.1791e-05],
                               [8.0279e-02, 5.8755e-04, 1.5569e-05],
                               [9.7579e-02, 3.2700e-04, 6.5280e-06],
                               [1.1861e-01, 7.8205e-05, 2.5881e-06],
                               [1.4417e-01, 3.3455e-05, 1.5143e-06],
                               [1.7524e-01, 4.9313e-06, 5.6663e-07],
                               [2.1300e-01, 4.1948e-06, 6.8549e-07],
                               [2.5891e-01, 3.9863e-06, 8.2061e-07],
                               [3.1470e-01, 2.0861e-06, 6.1379e-07],
                               [3.8252e-01, 2.1154e-06, 6.3084e-07],
                               [4.6496e-01, 1.9906e-06, 6.0793e-07],
                               [5.6516e-01, 2.3816e-06, 7.0610e-07]]),
                     np.array([[1.14030000e-02, 1.20493333e-02, 7.32200000e-04],
                               [1.38610000e-02, 6.71800000e-03, 3.71853333e-04],
                               [1.68480000e-02, 4.10506667e-03, 2.23106667e-04],
                               [2.04790000e-02, 2.43306667e-03, 1.46873333e-04],
                               [2.48920000e-02, 1.40940000e-03, 9.59200000e-05],
                               [3.02560000e-02, 7.43400000e-04, 3.50226667e-05],
                               [3.67770000e-02, 3.51466667e-04, 1.59573333e-05],
                               [4.47020000e-02, 9.80666667e-05, 7.29466667e-06],
                               [5.43360000e-02, 1.73500000e-05, 2.59200000e-06],
                               [6.60450000e-02, 4.86286667e-05, 2.46453333e-06],
                               [8.02790000e-02, 9.71733333e-05, 4.68166667e-06],
                               [9.75790000e-02, 7.06533333e-05, 2.32180000e-06],
                               [1.18610000e-01, 1.93046667e-05, 1.00813333e-06],
                               [1.44170000e-01, 6.61193333e-06, 5.29773333e-07],
                               [1.75240000e-01, 3.23726667e-06, 3.65933333e-07],
                               [2.13000000e-01, 3.29920000e-06, 4.74273333e-07],
                               [2.58910000e-01, 1.71180000e-06, 4.24720000e-07],
                               [3.14700000e-01, 2.24020000e-06, 5.08946667e-07],
                               [3.82520000e-01, 2.73306667e-06, 5.71513333e-07],
                               [4.64960000e-01, 2.36153333e-06, 5.24806667e-07],
                               [5.65160000e-01, 2.17460000e-06, 5.31346667e-07]])],
        layerSlds=[[np.array([[3.15755349e+01, 3.35278238e-06, 4.16625659e+00],
                              [3.61791464e+01, 7.68327921e-07, 4.16625659e+00],
                              [1.00488530e+01, 2.06044530e-06, 2.78042232e+01],
                              [1.08043784e+01, 3.29384190e-06, 2.78042232e+01],
                              [2.42251646e+01, 2.35556998e-06, 1.55593097e+01],
                              [1.49022278e+01, 7.42138004e-07, 1.55593097e+01],
                              [1.49022278e+01, 7.42138004e-07, 1.55593097e+01],
                              [2.42251646e+01, 2.35556998e-06, 1.55593097e+01]])],
                   [np.array([[3.15755349e+01, 4.11636356e-06, 4.16625659e+00],
                              [3.61791464e+01, 1.39268494e-06, 4.16625659e+00],
                              [1.00488530e+01, 2.45715680e-06, 2.78042232e+01],
                              [1.08043784e+01, 5.26668495e-06, 2.78042232e+01],
                              [2.42251646e+01, 3.31348777e-06, 1.55593097e+01],
                              [1.49022278e+01, 1.37428245e-06, 1.55593097e+01],
                              [1.49022278e+01, 1.37428245e-06, 1.55593097e+01],
                              [2.42251646e+01, 3.31348777e-06, 1.55593097e+01]])]],
        sldProfiles=[[np.array([[0.00000000e+00, 2.07301741e-06],
                                [1.10000000e+01, 2.07309604e-06],
                                [2.20000000e+01, 2.07345780e-06],
                                [3.30000000e+01, 2.07491687e-06],
                                [4.40000000e+01, 2.17562259e-06],
                                [5.50000000e+01, 3.22650495e-06],
                                [6.60000000e+01, 3.40913848e-06],
                                [7.70000000e+01, 3.13506253e-06],
                                [8.80000000e+01, 1.20456289e-06],
                                [9.90000000e+01, 1.27138002e-06],
                                [1.10000000e+02, 1.56285495e-06],
                                [1.21000000e+02, 1.84518709e-06],
                                [1.32000000e+02, 2.00498449e-06],
                                [1.43000000e+02, 1.96260665e-06],
                                [1.54000000e+02, 1.71966879e-06],
                                [1.65000000e+02, 1.39383267e-06],
                                [1.76000000e+02, 1.22970195e-06],
                                [1.87000000e+02, 1.41565526e-06],
                                [1.98000000e+02, 1.88172657e-06],
                                [2.09000000e+02, 2.40655867e-06],
                                [2.20000000e+02, 2.83570420e-06],
                                [2.31000000e+02, 3.11210082e-06],
                                [2.42000000e+02, 3.24277802e-06],
                                [2.53000000e+02, 3.28427452e-06],
                                [2.64000000e+02, 3.29268847e-06],
                                [2.75000000e+02, 3.29375418e-06],
                                [2.86000000e+02, 3.29383773e-06],
                                [2.97000000e+02, 3.29384178e-06],
                                [3.08000000e+02, 3.29384190e-06]]),
                      np.array([[0.00000000e+00, 2.07301819e-06],
                                [1.10000000e+01, 2.07310296e-06],
                                [2.20000000e+01, 2.07350415e-06],
                                [3.30000000e+01, 2.07518460e-06],
                                [4.40000000e+01, 2.23394767e-06],
                                [5.50000000e+01, 3.90646736e-06],
                                [6.60000000e+01, 4.18619279e-06],
                                [7.70000000e+01, 3.91675004e-06],
                                [8.80000000e+01, 1.92451547e-06],
                                [9.90000000e+01, 2.06988861e-06],
                                [1.10000000e+02, 2.47614934e-06],
                                [1.21000000e+02, 2.84889288e-06],
                                [1.32000000e+02, 3.00529286e-06],
                                [1.43000000e+02, 2.86310144e-06],
                                [1.54000000e+02, 2.49967205e-06],
                                [1.65000000e+02, 2.09673058e-06],
                                [1.76000000e+02, 1.92431424e-06],
                                [1.87000000e+02, 2.18829605e-06],
                                [1.98000000e+02, 2.83032190e-06],
                                [2.09000000e+02, 3.62584708e-06],
                                [2.20000000e+02, 4.36871153e-06],
                                [2.31000000e+02, 4.89806866e-06],
                                [2.42000000e+02, 5.16145928e-06],
                                [2.53000000e+02, 5.24684298e-06],
                                [2.64000000e+02, 5.26428707e-06],
                                [2.75000000e+02, 5.26650242e-06],
                                [2.86000000e+02, 5.26667628e-06],
                                [2.97000000e+02, 5.26668469e-06],
                                [3.08000000e+02, 5.26668495e-06]])]],
        resampledLayers=[[np.array([[0., 0., 0.]])], [np.array([[0., 0., 0.]])]],
        calculationResults=RAT.outputs.CalculationResults(
            chiValues=np.array([4.6077885, 7.00028098]),
            sumChi=11.608069475997699
        ),
        contrastParams=RAT.outputs.ContrastParams(
            backgroundParams=np.array([2.37113128e-06, 1.99006694e-06]),
            scalefactors=np.array([0.1, 0.15]),
            bulkIn=np.array([2.073e-06, 2.073e-06]),
            bulkOut=np.array([6.01489149e-06, 1.59371685e-06]),
            resolutionParams=np.array([0.03, 0.03]),
            subRoughs=np.array([6.19503045, 6.19503045]),
            resample=np.array([0.0, 0.0])
        ),
        fitParams=np.array([6.19503045e+00, 1.84420960e+01, 2.11039621e+01, 8.75538121e+00,
                            3.72292994e+00, 1.84624551e+01, 1.02316734e+01, 2.31156093e+01,
                            1.09906265e+01, 5.71005361e+00, 1.67933822e+01, 1.72009856e+01,
                            3.00260126e+01, 2.94448999e+01, 2.37113128e-06, 1.99006694e-06,
                            6.01489149e-06, 1.59371685e-06]),
        fitNames=['Substrate Roughness', 'Oxide Thickness', 'SAM Tails Thickness', 'SAM Tails Hydration',
                  'SAM Roughness', 'CW Thickness', 'SAM Heads Thickness', 'SAM Heads Hydration',
                  'Bilayer Heads Thickness', 'Bilayer Roughness', 'Bilayer Tails Thickness', 'Bilayer Tails Hydration',
                  'Bilayer Heads Hydration', 'Oxide Hydration', 'Background parameter D2O', 'Background parameter SMW',
                  'D2O', 'SMW'],
        bestFitMean=RAT.outputs.BestFitMean(
            reflectivity=[np.array([[1.14030000e-02, 1.45891447e+01],
                                    [1.38610000e-02, 1.45739839e+01],
                                    [1.68480000e-02, 1.45684725e+01],
                                    [2.04790000e-02, 1.45658452e+01],
                                    [2.48920000e-02, 1.45641513e+01],
                                    [3.02560000e-02, 1.45628311e+01],
                                    [3.67770000e-02, 1.45618510e+01],
                                    [4.47020000e-02, 1.45613427e+01],
                                    [5.43360000e-02, 1.45612940e+01],
                                    [6.60450000e-02, 1.45613971e+01],
                                    [8.02790000e-02, 1.45613678e+01],
                                    [9.75790000e-02, 1.45612960e+01],
                                    [1.18610000e-01, 1.45612799e+01],
                                    [1.44170000e-01, 1.45612749e+01],
                                    [1.75240000e-01, 1.45612726e+01],
                                    [2.13000000e-01, 1.45612723e+01],
                                    [2.58910000e-01, 1.45612724e+01],
                                    [3.14700000e-01, 1.45612723e+01],
                                    [3.82520000e-01, 1.45612723e+01],
                                    [4.64960000e-01, 1.45612723e+01],
                                    [5.65160000e-01, 1.45612723e+01]]),
                          np.array([[1.14030000e-02, 1.00000316e+00],
                                    [1.38610000e-02, 1.21238320e-01],
                                    [1.68480000e-02, 2.13433068e-02],
                                    [2.04790000e-02, 8.71162144e-03],
                                    [2.48920000e-02, 5.72807902e-03],
                                    [3.02560000e-02, 3.71827525e-03],
                                    [3.67770000e-02, 1.72067772e-03],
                                    [4.47020000e-02, 3.51471141e-04],
                                    [5.43360000e-02, 2.03975460e-05],
                                    [6.60450000e-02, 1.89221181e-04],
                                    [8.02790000e-02, 1.49280488e-04],
                                    [9.75790000e-02, 3.86439083e-05],
                                    [1.18610000e-01, 1.63612094e-05],
                                    [1.44170000e-01, 6.75770325e-06],
                                    [1.75240000e-01, 3.45955607e-06],
                                    [2.13000000e-01, 3.20880782e-06],
                                    [2.58910000e-01, 3.32068345e-06],
                                    [3.14700000e-01, 3.21671807e-06],
                                    [3.82520000e-01, 3.15612021e-06],
                                    [4.64960000e-01, 3.15645546e-06],
                                    [5.65160000e-01, 3.15511510e-06]])],
            sld=[[np.array([[0.00000000e+00, 2.07301741e-06],
                            [1.10000000e+01, 2.07309604e-06],
                            [2.20000000e+01, 2.07345780e-06],
                            [3.30000000e+01, 2.07491687e-06],
                            [4.40000000e+01, 2.17562259e-06],
                            [5.50000000e+01, 3.22650495e-06],
                            [6.60000000e+01, 3.40913848e-06],
                            [7.70000000e+01, 3.13506253e-06],
                            [8.80000000e+01, 1.20456289e-06],
                            [9.90000000e+01, 1.27138002e-06],
                            [1.10000000e+02, 1.56285495e-06],
                            [1.21000000e+02, 1.84518709e-06],
                            [1.32000000e+02, 2.00498449e-06],
                            [1.43000000e+02, 1.96260665e-06],
                            [1.54000000e+02, 1.71966879e-06],
                            [1.65000000e+02, 1.39383267e-06],
                            [1.76000000e+02, 1.22970195e-06],
                            [1.87000000e+02, 1.41565526e-06],
                            [1.98000000e+02, 1.88172657e-06],
                            [2.09000000e+02, 2.40655867e-06],
                            [2.20000000e+02, 2.83570420e-06],
                            [2.31000000e+02, 3.11210082e-06],
                            [2.42000000e+02, 3.24277802e-06],
                            [2.53000000e+02, 3.28427452e-06],
                            [2.64000000e+02, 3.29268847e-06],
                            [2.75000000e+02, 3.29375418e-06],
                            [2.86000000e+02, 3.29383773e-06],
                            [2.97000000e+02, 3.29384178e-06],
                            [3.08000000e+02, 3.29384190e-06]]),
                  np.array([[0.00000000e+00, 2.07301819e-06],
                            [1.10000000e+01, 2.07310296e-06],
                            [2.20000000e+01, 2.07350415e-06],
                            [3.30000000e+01, 2.07518460e-06],
                            [4.40000000e+01, 2.23394767e-06],
                            [5.50000000e+01, 3.90646736e-06],
                            [6.60000000e+01, 4.18619279e-06],
                            [7.70000000e+01, 3.91675004e-06],
                            [8.80000000e+01, 1.92451547e-06],
                            [9.90000000e+01, 2.06988861e-06],
                            [1.10000000e+02, 2.47614934e-06],
                            [1.21000000e+02, 2.84889288e-06],
                            [1.32000000e+02, 3.00529286e-06],
                            [1.43000000e+02, 2.86310144e-06],
                            [1.54000000e+02, 2.49967205e-06],
                            [1.65000000e+02, 2.09673058e-06],
                            [1.76000000e+02, 1.92431424e-06],
                            [1.87000000e+02, 2.18829605e-06],
                            [1.98000000e+02, 2.83032190e-06],
                            [2.09000000e+02, 3.62584708e-06],
                            [2.20000000e+02, 4.36871153e-06],
                            [2.31000000e+02, 4.89806866e-06],
                            [2.42000000e+02, 5.16145928e-06],
                            [2.53000000e+02, 5.24684298e-06],
                            [2.64000000e+02, 5.26428707e-06],
                            [2.75000000e+02, 5.26650242e-06],
                            [2.86000000e+02, 5.26667628e-06],
                            [2.97000000e+02, 5.26668469e-06],
                            [3.08000000e+02, 5.26668495e-06]])]],
            chi=3653339067134688.5,
            data=[np.array([[1.1403e-02, 1.0063e+00, 1.9003e-02],
                            [1.3861e-02, 9.0118e-01, 1.1774e-02],
                            [1.6848e-02, 7.0455e-02, 1.3083e-03],
                            [2.0479e-02, 1.7544e-02, 5.1254e-04],
                            [2.4892e-02, 6.4257e-03, 2.6236e-04],
                            [3.0256e-02, 2.7746e-03, 8.5758e-05],
                            [3.6777e-02, 1.8591e-03, 4.9391e-05],
                            [4.4702e-02, 1.1002e-03, 3.2644e-05],
                            [5.4336e-02, 6.6691e-04, 2.1365e-05],
                            [6.6045e-02, 6.0729e-04, 1.1791e-05],
                            [8.0279e-02, 5.8755e-04, 1.5569e-05],
                            [9.7579e-02, 3.2700e-04, 6.5280e-06],
                            [1.1861e-01, 7.8205e-05, 2.5881e-06],
                            [1.4417e-01, 3.3455e-05, 1.5143e-06],
                            [1.7524e-01, 4.9313e-06, 5.6663e-07],
                            [2.1300e-01, 4.1948e-06, 6.8549e-07],
                            [2.5891e-01, 3.9863e-06, 8.2061e-07],
                            [3.1470e-01, 2.0861e-06, 6.1379e-07],
                            [3.8252e-01, 2.1154e-06, 6.3084e-07],
                            [4.6496e-01, 1.9906e-06, 6.0793e-07],
                            [5.6516e-01, 2.3816e-06, 7.0610e-07]]),
                  np.array([[1.14030000e-02, 1.20493333e-02, 7.32200000e-04],
                            [1.38610000e-02, 6.71800000e-03, 3.71853333e-04],
                            [1.68480000e-02, 4.10506667e-03, 2.23106667e-04],
                            [2.04790000e-02, 2.43306667e-03, 1.46873333e-04],
                            [2.48920000e-02, 1.40940000e-03, 9.59200000e-05],
                            [3.02560000e-02, 7.43400000e-04, 3.50226667e-05],
                            [3.67770000e-02, 3.51466667e-04, 1.59573333e-05],
                            [4.47020000e-02, 9.80666667e-05, 7.29466667e-06],
                            [5.43360000e-02, 1.73500000e-05, 2.59200000e-06],
                            [6.60450000e-02, 4.86286667e-05, 2.46453333e-06],
                            [8.02790000e-02, 9.71733333e-05, 4.68166667e-06],
                            [9.75790000e-02, 7.06533333e-05, 2.32180000e-06],
                            [1.18610000e-01, 1.93046667e-05, 1.00813333e-06],
                            [1.44170000e-01, 6.61193333e-06, 5.29773333e-07],
                            [1.75240000e-01, 3.23726667e-06, 3.65933333e-07],
                            [2.13000000e-01, 3.29920000e-06, 4.74273333e-07],
                            [2.58910000e-01, 1.71180000e-06, 4.24720000e-07],
                            [3.14700000e-01, 2.24020000e-06, 5.08946667e-07],
                            [3.82520000e-01, 2.73306667e-06, 5.71513333e-07],
                            [4.64960000e-01, 2.36153333e-06, 5.24806667e-07],
                            [5.65160000e-01, 2.17460000e-06, 5.31346667e-07]])]
        ),
        predictionIntervals=RAT.outputs.PredictionIntervals(
            reflectivity=[np.array([[1.00000560e+00, 7.07687612e-01, 2.08315160e-02, 2.40787966e-03,
                                     2.17627660e-03, 2.54301700e-03, 1.76309827e-03, 6.15269679e-04,
                                     3.43679710e-05, 7.93625275e-05, 1.27760549e-04, 3.35799941e-05,
                                     6.75048751e-06, 7.64258431e-06, 6.05800395e-06, 5.60288298e-06,
                                     5.60333677e-06, 5.60223341e-06, 5.60206667e-06, 5.60206314e-06,
                                     5.60206314e-06],
                                    [1.00000560e+00, 7.07687612e-01, 2.08315160e-02, 2.40787966e-03,
                                     2.17627660e-03, 2.54301700e-03, 1.76309827e-03, 6.15269679e-04,
                                     3.43679710e-05, 7.93625275e-05, 1.27760549e-04, 3.35799941e-05,
                                     6.75048751e-06, 7.64258431e-06, 6.05800395e-06, 5.60288298e-06,
                                     5.60333677e-06, 5.60223341e-06, 5.60206667e-06, 5.60206314e-06,
                                     5.60206314e-06],
                                    [1.55201098e+01, 1.53748894e+01, 1.50402011e+01, 1.50299478e+01,
                                     1.50290525e+01, 1.50287935e+01, 1.50282126e+01, 1.50276044e+01,
                                     1.50273248e+01, 1.50273185e+01, 1.50272997e+01, 1.50272498e+01,
                                     1.50272364e+01, 1.50272347e+01, 1.50272335e+01, 1.50272330e+01,
                                     1.50272329e+01, 1.50272328e+01, 1.50272328e+01, 1.50272328e+01,
                                     1.50272328e+01],
                                    [2.91397425e+01, 2.91324974e+01, 2.91281368e+01, 2.91255472e+01,
                                     2.91240295e+01, 2.91231836e+01, 2.91227893e+01, 2.91226872e+01,
                                     2.91226902e+01, 2.91226359e+01, 2.91225541e+01, 2.91225457e+01,
                                     2.91225448e+01, 2.91225407e+01, 2.91225398e+01, 2.91225393e+01,
                                     2.91225391e+01, 2.91225390e+01, 2.91225390e+01, 2.91225389e+01,
                                     2.91225389e+01],
                                    [2.91397425e+01, 2.91324974e+01, 2.91281368e+01, 2.91255472e+01,
                                     2.91240295e+01, 2.91231836e+01, 2.91227893e+01, 2.91226872e+01,
                                     2.91226902e+01, 2.91226359e+01, 2.91225541e+01, 2.91225457e+01,
                                     2.91225448e+01, 2.91225407e+01, 2.91225398e+01, 2.91225393e+01,
                                     2.91225391e+01, 2.91225390e+01, 2.91225390e+01, 2.91225389e+01,
                                     2.91225389e+01]]),
                          np.array([[7.82198834e-01, 2.84434275e-02, 3.42472318e-03, 1.45801296e-03,
                                     2.02213149e-03, 2.00826891e-03, 1.27577246e-03, 4.27099544e-04,
                                     2.07304219e-05, 4.88683542e-05, 4.14000873e-05, 1.57801531e-05,
                                     2.08705254e-06, 2.27936213e-06, 1.09950377e-06, 7.09021331e-07,
                                     7.09539552e-07, 7.08228574e-07, 7.08101644e-07, 7.08098642e-07,
                                     7.08098641e-07],
                                    [7.82198834e-01, 2.84434275e-02, 3.42472318e-03, 1.45801296e-03,
                                     2.02213149e-03, 2.00826891e-03, 1.27577246e-03, 4.27099544e-04,
                                     2.07304219e-05, 4.88683542e-05, 4.14000873e-05, 1.57801531e-05,
                                     2.08705254e-06, 2.27936213e-06, 1.09950377e-06, 7.09021331e-07,
                                     7.09539552e-07, 7.08228574e-07, 7.08101644e-07, 7.08098642e-07,
                                     7.08098641e-07],
                                    [8.94587126e-01, 4.07514176e-01, 3.66355642e-02, 1.22207690e-02,
                                     5.91350591e-03, 3.17495745e-03, 1.50593011e-03, 5.80889579e-04,
                                     2.44654124e-04, 1.40925782e-04, 6.26965047e-05, 1.91064075e-05,
                                     9.45189755e-06, 6.16421495e-06, 5.17046678e-06, 4.24101973e-06,
                                     3.82067554e-06, 3.55352666e-06, 3.38981154e-06, 3.29631224e-06,
                                     3.25061722e-06],
                                    [1.00000560e+00, 7.63076662e-01, 6.77868181e-02, 2.23160672e-02,
                                     9.56355479e-03, 4.26929321e-03, 1.72181442e-03, 7.25142247e-04,
                                     4.54691084e-04, 2.27274223e-04, 8.54009496e-05, 2.26525796e-05,
                                     1.63600080e-05, 9.80814666e-06, 8.98896697e-06, 7.55397947e-06,
                                     6.73887287e-06, 6.22237216e-06, 5.90521384e-06, 5.72401646e-06,
                                     5.63546023e-06],
                                    [1.00000560e+00, 7.63076662e-01, 6.77868181e-02, 2.23160672e-02,
                                     9.56355479e-03, 4.26929321e-03, 1.72181442e-03, 7.25142247e-04,
                                     4.54691084e-04, 2.27274223e-04, 8.54009496e-05, 2.26525796e-05,
                                     1.63600080e-05, 9.80814666e-06, 8.98896697e-06, 7.55397947e-06,
                                     6.73887287e-06, 6.22237216e-06, 5.90521384e-06, 5.72401646e-06,
                                     5.63546023e-06]])],
            sld=[[np.array([[-2.26996619e-06, -2.26938579e-06, -2.26877469e-06, ...,
                             9.14568096e-07,  9.14567880e-07,  9.14567682e-07],
                            [-2.26996619e-06, -2.26938579e-06, -2.26877469e-06, ...,
                             9.14568096e-07,  9.14567880e-07,  9.14567682e-07],
                            [-1.67970553e-07, -1.67671068e-07, -1.67355735e-07, ...,
                             3.31763635e-06,  3.31763624e-06,  3.31763614e-06],
                            [2.07300000e-06,  2.07300000e-06,  2.07300001e-06, ...,
                             5.87958515e-06,  5.87958515e-06,  5.87958515e-06],
                            [2.07300000e-06,  2.07300000e-06,  2.07300001e-06, ...,
                             5.87958515e-06,  5.87958515e-06,  5.87958515e-06]])],
                 [np.array([[-1.35107208e-06, -1.34966627e-06, -1.34817823e-06, ...,
                             4.65378475e-06,  4.65378475e-06,  4.65378475e-06],
                            [-1.35107208e-06, -1.34966627e-06, -1.34817823e-06, ...,
                             4.65378475e-06,  4.65378475e-06,  4.65378475e-06],
                            [3.06178804e-07,  3.06904206e-07,  3.07672036e-07, ...,
                             4.92477587e-06,  4.92477714e-06,  4.92477830e-06],
                            [2.07300000e-06,  2.07300000e-06,  2.07300001e-06, ...,
                             5.17896134e-06,  5.17896381e-06,  5.17896605e-06],
                            [2.07300000e-06,  2.07300000e-06,  2.07300001e-06, ...,
                             5.17896134e-06,  5.17896381e-06,  5.17896605e-06]])]],
            reflectivityXData=[np.array([[0.011403, 0.013861, 0.016848, 0.020479, 0.024892, 0.030256,
                                          0.036777, 0.044702, 0.054336, 0.066045, 0.080279, 0.097579,
                                          0.118610, 0.144170, 0.175240, 0.213000, 0.258910, 0.314700,
                                          0.382520, 0.464960, 0.565160]]),
                               np.array([[0.011403, 0.013861, 0.016848, 0.020479, 0.024892, 0.030256,
                                          0.036777, 0.044702, 0.054336, 0.066045, 0.080279, 0.097579,
                                          0.118610, 0.144170, 0.175240, 0.213000, 0.258910, 0.314700,
                                          0.382520, 0.464960, 0.565160]])],
            sldXData=[[np.array([[0.,  11.,  22.,  33.,  44.,  55.,  66.,  77.,  88.,  99., 110.,
                                  121., 132., 143., 154., 165., 176., 187., 198., 209., 220., 231.,
                                  242., 253., 264., 275., 286., 297., 308., 319.]]),
                       np.array([[0.,  11.,  22.,  33.,  44.,  55.,  66.,  77.,  88.,  99., 110.,
                                  121., 132., 143., 154., 165., 176., 187., 198., 209., 220., 231.,
                                  242., 253., 264., 275., 286., 297., 308., 319.]])]],
            sampleChi=np.array([1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.12748255e+06, 1.12748255e+06, 1.46133559e+16, 1.12748255e+06,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16,
                                1.12748255e+06, 1.46133559e+16, 1.12748255e+06, 1.12748255e+06,
                                1.12748255e+06, 1.12748255e+06, 1.12748255e+06, 1.12748255e+06,
                                1.46133559e+16, 1.46133559e+16, 1.46133559e+16, 1.46133559e+16,
                                1.46133559e+16, 1.12748255e+06, 1.12748255e+06, 1.46133559e+16])
        ),
        confidenceIntervals=RAT.outputs.ConfidenceIntervals(
            percentile65=np.array([[-1.29074586e-231, 8.33251318e+000, 1.75397363e+001, 1.75397363e+001,
                                    9.85302945e+000, 9.85302945e+000, 8.34197863e+000, 8.34197863e+000,
                                    1.65750684e+001, 1.45435510e+001, 1.45435510e+001, 1.52609047e+001,
                                    4.82866779e+001, 2.91225389e+001, 5.60206314e-006, 7.08098641e-007,
                                    7.08098641e-007, 4.65378475e-006],
                                   [8.33251318e+000, 5.48185565e+001, 5.48185565e+001, 4.57554170e+001,
                                    4.57554170e+001, 1.17557273e+001, 1.17557273e+001, 3.18752608e+001,
                                    3.18752608e+001, 1.65750684e+001, 1.52609047e+001, 4.88237113e+001,
                                    4.88237113e+001, 4.82866779e+001, 2.91225389e+001, 5.60206314e-006,
                                    5.87958515e-006, 5.87958515e-006]]),
            percentile95=np.array([[-1.29074586e-231, 8.33251318e+000, 1.75397363e+001,  1.75397363e+001,
                                    9.85302945e+000, 9.85302945e+000, 8.34197863e+000, 8.34197863e+000,
                                    1.65750684e+001, 1.45435510e+001, 1.45435510e+001, 1.52609047e+001,
                                    4.82866779e+001, 2.91225389e+001, 5.60206314e-006, 7.08098641e-007,
                                    7.08098641e-007, 4.65378475e-006],
                                   [8.33251318e+000, 5.48185565e+001, 5.48185565e+001, 4.57554170e+001,
                                    4.57554170e+001, 1.17557273e+001, 1.17557273e+001, 3.18752608e+001,
                                    3.18752608e+001, 1.65750684e+001, 1.52609047e+001, 4.88237113e+001,
                                    4.88237113e+001, 4.82866779e+001, 2.91225389e+001, 5.60206314e-006,
                                    5.87958515e-006, 5.87958515e-006]]),
            mean=np.array([[4.16625659e+00, 3.15755349e+01, 3.61791464e+01, 3.16475766e+01,
                            2.78042232e+01, 1.08043784e+01, 1.00488530e+01, 2.01086197e+01,
                            2.42251646e+01, 1.55593097e+01, 1.49022278e+01, 3.20423080e+01,
                            4.85551946e+01, 3.87046084e+01, 1.45612723e+01, 3.15508089e-06,
                            3.29384190e-06, 5.26668495e-06]])
        ),
        dreamParams=RAT.outputs.DreamParams(
            nParams=18.0,
            nChains=1.0,
            nGenerations=1.0,
            parallel=False,
            CPU=1.0,
            jumpProbability=0.5,
            pUnitGamma=0.2,
            nCR=3.0,
            delta=3.0,
            steps=50.0,
            zeta=1e-12,
            outlier="iqr",
            adaptPCR=False,
            thinning=1.0,
            epsilon=0.025,
            ABC=False,
            IO=False,
            storeOutput=False,
            R=np.array([[0.]]),
        ),
        dreamOutput=RAT.outputs.DreamOutput(
            allChains=np.array([[[8.33251318e+00],
                                 [5.48185565e+01],
                                 [1.75397363e+01],
                                 [4.57554170e+01],
                                 [9.85302945e+00],
                                 [1.17557273e+01],
                                 [8.34197863e+00],
                                 [3.18752608e+01],
                                 [1.65750684e+01],
                                 [1.45435510e+01],
                                 [1.52609047e+01],
                                 [4.88237113e+01],
                                 [4.82866779e+01],
                                 [2.91225389e+01],
                                 [5.60206314e-06],
                                 [7.08098641e-07],
                                 [5.87958515e-06],
                                 [4.65378475e-06],
                                 [-4.86509830e+01],
                                 [-5.63741277e+05]]]),
            outlierChains=np.array([[0.0, 0.0]]),
            runtime=2.6e-06,
            iteration=2.0,
            modelOutput=0.0,
            AR=np.array([[1.0, np.nan]]),
            R_stat=np.array([[1.0, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                              np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan]]),
            CR=np.array([[1.,         0.33333333, 0.33333333, 0.33333333]]),
        ),
        nestedSamplerOutput=RAT.outputs.NestedSamplerOutput(
            logZ=0.0,
            nestSamples=np.array([[0.0, 0.0]]),
            postSamples=np.array([[0.0, 0.0]])
        ),
        chain=np.array([[-1.29231905e-231, 8.33251318e+000, 5.48185565e+001, 1.75397363e+001,
                         4.57554170e+001, 9.85302945e+000, 1.17557273e+001, 8.34197863e+000,
                         3.18752608e+001, 1.65750684e+001, 1.45435510e+001, 1.52609047e+001,
                         4.88237113e+001, 4.82866779e+001, 2.91225389e+001, 5.60206314e-006,
                         7.08098641e-007, 5.87958515e-006],
                        [8.33251318e+000, 5.48185565e+001, 1.75397363e+001, 4.57554170e+001,
                         9.85302945e+000, 1.17557273e+001, 8.34197863e+000, 3.18752608e+001,
                         1.65750684e+001, 1.45435510e+001, 1.52609047e+001, 4.88237113e+001,
                         4.82866779e+001, 2.91225389e+001, 5.60206314e-006, 7.08098641e-007,
                         5.87958515e-006, 4.65378475e-006]])
    )


@pytest.mark.parametrize(["test_procedure", "test_output_results", "test_bayes", "test_results"], [
    (Procedures.Calculate, "reflectivity_calculation_output_results", None, "reflectivity_calculation_results"),
    (Procedures.Dream, "dream_output_results", "dream_bayes", "dream_results"),
])
def test_make_results(test_procedure, test_output_results, test_bayes, test_results, request) -> None:
    """The python results object should contain the relevant parameters defined in the C++ results and bayes objects."""
    test_output_results = request.getfixturevalue(test_output_results)
    if test_bayes:
        test_bayes = request.getfixturevalue(test_bayes)

    test_results = request.getfixturevalue(test_results)
    results = RAT.outputs.make_results(test_procedure, test_output_results, test_bayes)

    check_results_equal(test_results, results)


@pytest.mark.parametrize(["test_procedure", "test_output_problem", "test_output_results", "test_bayes", "test_results"], [
    (Procedures.Calculate, "reflectivity_calculation_problem", "reflectivity_calculation_output_results", None, "reflectivity_calculation_results"),
    (Procedures.Dream, "dream_problem", "dream_output_results", "dream_bayes", "dream_results"),
])
def test_run(test_procedure, test_output_problem, test_output_results, test_bayes, test_results, request) -> None:
    input_project = request.getfixturevalue("input_project")
    test_output_problem = request.getfixturevalue(test_output_problem)
    test_output_results = request.getfixturevalue(test_output_results)
    if test_bayes:
        test_bayes = request.getfixturevalue(test_bayes)

    test_results = request.getfixturevalue(test_results)

    with mock.patch.object(RAT.rat_core, "RATMain", mock.MagicMock(return_value=(test_output_problem,
                                                                                 test_output_results,
                                                                                 test_bayes))):
        # Use default project as we patch RATMain to give the desired outputs
        project, results = RAT.run(input_project, RAT.set_controls(procedure=test_procedure))

    check_results_equal(test_results, results)


def check_results_equal(actual_results, expected_results) -> None:
    """Compare two instances of "Results" or "BayesResults" objects for equality.

    We focus here on the fields common to both results objects, and also check the equality of the subclasses
    "CalculationResults" and "ContrastParams".
    """

    list_fields = ["reflectivity", "simulation", "shiftedData"]
    double_list_fields = ["layerSlds", "sldProfiles", "resampledLayers"]
    contrast_param_fields = ["backgroundParams", "scalefactors", "bulkIn", "bulkOut", "resolutionParams", "subRoughs",
                             "resample"]

    assert ((isinstance(actual_results, RAT.outputs.Results) and
             isinstance(expected_results, RAT.outputs.Results)) or
            (isinstance(actual_results, RAT.outputs.BayesResults) and
             isinstance(expected_results, RAT.outputs.BayesResults)))

    # The first set of fields are either 1D or 2D python lists containing numpy arrays.
    # Hence, we need to compare them element-wise.
    for list_field in list_fields:
        for (a, b) in zip(getattr(actual_results, list_field), getattr(expected_results, list_field)):
            assert (a == b).all()

    for list_field in double_list_fields:
        actual_list = getattr(actual_results, list_field)
        expected_list = getattr(expected_results, list_field)
        assert len(actual_list) == len(expected_list)
        for i in range(len(actual_list)):
            for (a, b) in zip(actual_list[i], expected_list[i]):
                assert (a == b).all()

    # Compare the final fields
    assert (actual_results.fitParams == expected_results.fitParams).all()
    assert actual_results.fitNames == expected_results.fitNames

    # Compare the two subclasses defined within the class
    assert actual_results.calculationResults.sumChi == expected_results.calculationResults.sumChi
    assert (actual_results.calculationResults.chiValues == expected_results.calculationResults.chiValues).all()

    for field in contrast_param_fields:
        assert (getattr(actual_results.contrastParams, field) == getattr(expected_results.contrastParams, field)).all()

    if isinstance(actual_results, RAT.outputs.BayesResults) and isinstance(expected_results, RAT.outputs.BayesResults):
        check_bayes_fields_equal(actual_results, expected_results)

    return None


def check_bayes_fields_equal(actual_results, expected_results) -> None:
    """Compare two instances of the "BayesResults" object for equality.

    We focus here on the fields and subclasses specific to the Bayesian optimisation.
    """

    # The BayesResults object consists of a number of subclasses, each containing fields of differing formats.
    subclasses = ["bestFitMean", "predictionIntervals", "confidenceIntervals", "dreamParams", "dreamOutput",
                  "nestedSamplerOutput"]

    param_fields = {"bestFitMean": ["chi"],
                    "predictionIntervals": [],
                    "confidenceIntervals": [],
                    "dreamParams": ["nParams", "nChains", "nGenerations", "parallel", "CPU", "jumpProbability",
                                    "pUnitGamma", "nCR", "delta", "steps", "zeta", "outlier", "adaptPCR", "thinning",
                                    "epsilon", "ABC", "IO", "storeOutput"],
                    "dreamOutput": ["runtime", "iteration", "modelOutput"],
                    "nestedSamplerOutput": ["logZ"]
                    }

    list_fields = {"bestFitMean": ["reflectivity", "data"],
                   "predictionIntervals": ["reflectivity", "reflectivityXData"],
                   "confidenceIntervals": [],
                   "dreamParams": [],
                   "dreamOutput": [],
                   "nestedSamplerOutput": []
                   }

    double_list_fields = {"bestFitMean": ["sld"],
                          "predictionIntervals": ["sld", "sldXData"],
                          "confidenceIntervals": [],
                          "dreamParams": [],
                          "dreamOutput": [],
                          "nestedSamplerOutput": []
                          }

    array_fields = {"bestFitMean": [],
                    "predictionIntervals": ["sampleChi"],
                    "confidenceIntervals": ["percentile65", "percentile95", "mean"],
                    "dreamParams": ["R"],
                    "dreamOutput": ["allChains", "outlierChains", "AR", "R_stat", "CR"],
                    "nestedSamplerOutput": ["nestSamples", "postSamples"],
                    }

    for subclass in subclasses:
        actual_subclass = getattr(actual_results, subclass)
        expected_subclass = getattr(expected_results, subclass)

        for field in param_fields[subclass]:
            assert getattr(actual_subclass, field) == getattr(expected_subclass, field)

        for field in list_fields[subclass]:
            for (a, b) in zip(getattr(actual_subclass, field), getattr(expected_subclass, field)):
                assert (a == b).all()

        for field in double_list_fields[subclass]:
            actual_list = getattr(actual_subclass, field)
            expected_list = getattr(expected_subclass, field)
            assert len(actual_list) == len(expected_list)
            for i in range(len(actual_list)):
                for (a, b) in zip(actual_list[i], expected_list[i]):
                    assert (a == b).all()

        # Need to account for the arrays that are initialised as "NaN" in the compiled code
        for array in array_fields[subclass]:
            actual_array = getattr(actual_subclass, array)
            expected_array = getattr(expected_subclass, array)
            for i in range(len(actual_array)):
                assert ((actual_array == expected_array).all() or
                        (['NaN' if np.isnan(el) else el for el in actual_array[i]] ==
                         ['NaN' if np.isnan(el) else el for el in expected_array[i]]))

    assert (actual_results.chain == expected_results.chain).all()

    return None
